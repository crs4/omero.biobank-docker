# **********************************************************************
#
# Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.4.2
#
# <auto-generated>
#
# Generated from file `IlluminaBeadChipMeasures.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy, __builtin__
import omero_model_IObject_ice
import omero_RTypes_ice
import omero_System_ice
import omero_Collections_ice
import omero_model_DataCollection_ice

# Included module omero
_M_omero = Ice.openModule('omero')

# Included module omero.model
_M_omero.model = Ice.openModule('omero.model')

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module omero.sys
_M_omero.sys = Ice.openModule('omero.sys')

# Included module omero.api
_M_omero.api = Ice.openModule('omero.api')

# Start of module omero
__name__ = 'omero'

# Start of module omero.model
__name__ = 'omero.model'

if not _M_omero.model.__dict__.has_key('IlluminaBeadChipMeasure'):
    _M_omero.model._t_IlluminaBeadChipMeasure = IcePy.declareClass('::omero::model::IlluminaBeadChipMeasure')
    _M_omero.model._t_IlluminaBeadChipMeasurePrx = IcePy.declareProxy('::omero::model::IlluminaBeadChipMeasure')

if not _M_omero.model.__dict__.has_key('Action'):
    _M_omero.model._t_Action = IcePy.declareClass('::omero::model::Action')
    _M_omero.model._t_ActionPrx = IcePy.declareProxy('::omero::model::Action')

if not _M_omero.model.__dict__.has_key('Details'):
    _M_omero.model._t_Details = IcePy.declareClass('::omero::model::Details')
    _M_omero.model._t_DetailsPrx = IcePy.declareProxy('::omero::model::Details')

if not _M_omero.model.__dict__.has_key('IlluminaBeadChipMeasures'):
    _M_omero.model.IlluminaBeadChipMeasures = Ice.createTempClass()
    class IlluminaBeadChipMeasures(_M_omero.model.DataCollection):
        def __init__(self, _id=None, _details=None, _loaded=False, _version=None, _vid=None, _label=None, _creationDate=None, _action=None, _lastUpdate=None, _redChannel=None, _greenChannel=None):
            if __builtin__.type(self) == _M_omero.model.IlluminaBeadChipMeasures:
                raise RuntimeError('omero.model.IlluminaBeadChipMeasures is an abstract class')
            _M_omero.model.DataCollection.__init__(self, _id, _details, _loaded, _version, _vid, _label, _creationDate, _action, _lastUpdate)
            self._redChannel = _redChannel
            self._greenChannel = _greenChannel

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::model::DataCollection', '::omero::model::IObject', '::omero::model::IlluminaBeadChipMeasures', '::omero::model::VLCollection')

        def ice_id(self, current=None):
            return '::omero::model::IlluminaBeadChipMeasures'

        def ice_staticId():
            return '::omero::model::IlluminaBeadChipMeasures'
        ice_staticId = staticmethod(ice_staticId)

        def getRedChannel(self, current=None):
            pass

        def setRedChannel(self, theRedChannel, current=None):
            pass

        def getGreenChannel(self, current=None):
            pass

        def setGreenChannel(self, theGreenChannel, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_omero.model._t_IlluminaBeadChipMeasures)

        __repr__ = __str__

    _M_omero.model.IlluminaBeadChipMeasuresPrx = Ice.createTempClass()
    class IlluminaBeadChipMeasuresPrx(_M_omero.model.DataCollectionPrx):

        def getRedChannel(self, _ctx=None):
            return _M_omero.model.IlluminaBeadChipMeasures._op_getRedChannel.invoke(self, ((), _ctx))

        def begin_getRedChannel(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.IlluminaBeadChipMeasures._op_getRedChannel.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getRedChannel(self, _r):
            return _M_omero.model.IlluminaBeadChipMeasures._op_getRedChannel.end(self, _r)

        def setRedChannel(self, theRedChannel, _ctx=None):
            return _M_omero.model.IlluminaBeadChipMeasures._op_setRedChannel.invoke(self, ((theRedChannel, ), _ctx))

        def begin_setRedChannel(self, theRedChannel, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.IlluminaBeadChipMeasures._op_setRedChannel.begin(self, ((theRedChannel, ), _response, _ex, _sent, _ctx))

        def end_setRedChannel(self, _r):
            return _M_omero.model.IlluminaBeadChipMeasures._op_setRedChannel.end(self, _r)

        def getGreenChannel(self, _ctx=None):
            return _M_omero.model.IlluminaBeadChipMeasures._op_getGreenChannel.invoke(self, ((), _ctx))

        def begin_getGreenChannel(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.IlluminaBeadChipMeasures._op_getGreenChannel.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getGreenChannel(self, _r):
            return _M_omero.model.IlluminaBeadChipMeasures._op_getGreenChannel.end(self, _r)

        def setGreenChannel(self, theGreenChannel, _ctx=None):
            return _M_omero.model.IlluminaBeadChipMeasures._op_setGreenChannel.invoke(self, ((theGreenChannel, ), _ctx))

        def begin_setGreenChannel(self, theGreenChannel, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.IlluminaBeadChipMeasures._op_setGreenChannel.begin(self, ((theGreenChannel, ), _response, _ex, _sent, _ctx))

        def end_setGreenChannel(self, _r):
            return _M_omero.model.IlluminaBeadChipMeasures._op_setGreenChannel.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.model.IlluminaBeadChipMeasuresPrx.ice_checkedCast(proxy, '::omero::model::IlluminaBeadChipMeasures', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.model.IlluminaBeadChipMeasuresPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_omero.model._t_IlluminaBeadChipMeasuresPrx = IcePy.defineProxy('::omero::model::IlluminaBeadChipMeasures', IlluminaBeadChipMeasuresPrx)

    _M_omero.model._t_IlluminaBeadChipMeasures = IcePy.declareClass('::omero::model::IlluminaBeadChipMeasures')

    _M_omero.model._t_IlluminaBeadChipMeasures = IcePy.defineClass('::omero::model::IlluminaBeadChipMeasures', IlluminaBeadChipMeasures, (), True, _M_omero.model._t_DataCollection, (), (
        ('_redChannel', (), _M_omero.model._t_IlluminaBeadChipMeasure),
        ('_greenChannel', (), _M_omero.model._t_IlluminaBeadChipMeasure)
    ))
    IlluminaBeadChipMeasures._ice_type = _M_omero.model._t_IlluminaBeadChipMeasures

    IlluminaBeadChipMeasures._op_getRedChannel = IcePy.Operation('getRedChannel', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero.model._t_IlluminaBeadChipMeasure, ())
    IlluminaBeadChipMeasures._op_setRedChannel = IcePy.Operation('setRedChannel', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_IlluminaBeadChipMeasure),), (), None, ())
    IlluminaBeadChipMeasures._op_getGreenChannel = IcePy.Operation('getGreenChannel', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero.model._t_IlluminaBeadChipMeasure, ())
    IlluminaBeadChipMeasures._op_setGreenChannel = IcePy.Operation('setGreenChannel', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_IlluminaBeadChipMeasure),), (), None, ())

    _M_omero.model.IlluminaBeadChipMeasures = IlluminaBeadChipMeasures
    del IlluminaBeadChipMeasures

    _M_omero.model.IlluminaBeadChipMeasuresPrx = IlluminaBeadChipMeasuresPrx
    del IlluminaBeadChipMeasuresPrx

# End of module omero.model

__name__ = 'omero'

# End of module omero
