# **********************************************************************
#
# Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.4.2
#
# <auto-generated>
#
# Generated from file `PlateWell.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy, __builtin__
import omero_model_IObject_ice
import omero_RTypes_ice
import omero_System_ice
import omero_Collections_ice
import omero_model_Vessel_ice

# Included module omero
_M_omero = Ice.openModule('omero')

# Included module omero.model
_M_omero.model = Ice.openModule('omero.model')

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module omero.sys
_M_omero.sys = Ice.openModule('omero.sys')

# Included module omero.api
_M_omero.api = Ice.openModule('omero.api')

# Start of module omero
__name__ = 'omero'

# Start of module omero.model
__name__ = 'omero.model'

if not _M_omero.model.__dict__.has_key('TiterPlate'):
    _M_omero.model._t_TiterPlate = IcePy.declareClass('::omero::model::TiterPlate')
    _M_omero.model._t_TiterPlatePrx = IcePy.declareProxy('::omero::model::TiterPlate')

if not _M_omero.model.__dict__.has_key('VesselContent'):
    _M_omero.model._t_VesselContent = IcePy.declareClass('::omero::model::VesselContent')
    _M_omero.model._t_VesselContentPrx = IcePy.declareProxy('::omero::model::VesselContent')

if not _M_omero.model.__dict__.has_key('VesselStatus'):
    _M_omero.model._t_VesselStatus = IcePy.declareClass('::omero::model::VesselStatus')
    _M_omero.model._t_VesselStatusPrx = IcePy.declareProxy('::omero::model::VesselStatus')

if not _M_omero.model.__dict__.has_key('Action'):
    _M_omero.model._t_Action = IcePy.declareClass('::omero::model::Action')
    _M_omero.model._t_ActionPrx = IcePy.declareProxy('::omero::model::Action')

if not _M_omero.model.__dict__.has_key('Details'):
    _M_omero.model._t_Details = IcePy.declareClass('::omero::model::Details')
    _M_omero.model._t_DetailsPrx = IcePy.declareProxy('::omero::model::Details')

if not _M_omero.model.__dict__.has_key('PlateWell'):
    _M_omero.model.PlateWell = Ice.createTempClass()
    class PlateWell(_M_omero.model.Vessel):
        def __init__(self, _id=None, _details=None, _loaded=False, _version=None, _vid=None, _activationDate=None, _destructionDate=None, _currentVolume=None, _initialVolume=None, _content=None, _status=None, _action=None, _lastUpdate=None, _label=None, _slot=None, _container=None, _containerSlotLabelUK=None, _containerSlotIndexUK=None):
            if __builtin__.type(self) == _M_omero.model.PlateWell:
                raise RuntimeError('omero.model.PlateWell is an abstract class')
            _M_omero.model.Vessel.__init__(self, _id, _details, _loaded, _version, _vid, _activationDate, _destructionDate, _currentVolume, _initialVolume, _content, _status, _action, _lastUpdate)
            self._label = _label
            self._slot = _slot
            self._container = _container
            self._containerSlotLabelUK = _containerSlotLabelUK
            self._containerSlotIndexUK = _containerSlotIndexUK

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::model::IObject', '::omero::model::PlateWell', '::omero::model::Vessel')

        def ice_id(self, current=None):
            return '::omero::model::PlateWell'

        def ice_staticId():
            return '::omero::model::PlateWell'
        ice_staticId = staticmethod(ice_staticId)

        def getLabel(self, current=None):
            pass

        def setLabel(self, theLabel, current=None):
            pass

        def getSlot(self, current=None):
            pass

        def setSlot(self, theSlot, current=None):
            pass

        def getContainer(self, current=None):
            pass

        def setContainer(self, theContainer, current=None):
            pass

        def getContainerSlotLabelUK(self, current=None):
            pass

        def setContainerSlotLabelUK(self, theContainerSlotLabelUK, current=None):
            pass

        def getContainerSlotIndexUK(self, current=None):
            pass

        def setContainerSlotIndexUK(self, theContainerSlotIndexUK, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_omero.model._t_PlateWell)

        __repr__ = __str__

    _M_omero.model.PlateWellPrx = Ice.createTempClass()
    class PlateWellPrx(_M_omero.model.VesselPrx):

        def getLabel(self, _ctx=None):
            return _M_omero.model.PlateWell._op_getLabel.invoke(self, ((), _ctx))

        def begin_getLabel(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.PlateWell._op_getLabel.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getLabel(self, _r):
            return _M_omero.model.PlateWell._op_getLabel.end(self, _r)

        def setLabel(self, theLabel, _ctx=None):
            return _M_omero.model.PlateWell._op_setLabel.invoke(self, ((theLabel, ), _ctx))

        def begin_setLabel(self, theLabel, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.PlateWell._op_setLabel.begin(self, ((theLabel, ), _response, _ex, _sent, _ctx))

        def end_setLabel(self, _r):
            return _M_omero.model.PlateWell._op_setLabel.end(self, _r)

        def getSlot(self, _ctx=None):
            return _M_omero.model.PlateWell._op_getSlot.invoke(self, ((), _ctx))

        def begin_getSlot(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.PlateWell._op_getSlot.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getSlot(self, _r):
            return _M_omero.model.PlateWell._op_getSlot.end(self, _r)

        def setSlot(self, theSlot, _ctx=None):
            return _M_omero.model.PlateWell._op_setSlot.invoke(self, ((theSlot, ), _ctx))

        def begin_setSlot(self, theSlot, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.PlateWell._op_setSlot.begin(self, ((theSlot, ), _response, _ex, _sent, _ctx))

        def end_setSlot(self, _r):
            return _M_omero.model.PlateWell._op_setSlot.end(self, _r)

        def getContainer(self, _ctx=None):
            return _M_omero.model.PlateWell._op_getContainer.invoke(self, ((), _ctx))

        def begin_getContainer(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.PlateWell._op_getContainer.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getContainer(self, _r):
            return _M_omero.model.PlateWell._op_getContainer.end(self, _r)

        def setContainer(self, theContainer, _ctx=None):
            return _M_omero.model.PlateWell._op_setContainer.invoke(self, ((theContainer, ), _ctx))

        def begin_setContainer(self, theContainer, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.PlateWell._op_setContainer.begin(self, ((theContainer, ), _response, _ex, _sent, _ctx))

        def end_setContainer(self, _r):
            return _M_omero.model.PlateWell._op_setContainer.end(self, _r)

        def getContainerSlotLabelUK(self, _ctx=None):
            return _M_omero.model.PlateWell._op_getContainerSlotLabelUK.invoke(self, ((), _ctx))

        def begin_getContainerSlotLabelUK(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.PlateWell._op_getContainerSlotLabelUK.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getContainerSlotLabelUK(self, _r):
            return _M_omero.model.PlateWell._op_getContainerSlotLabelUK.end(self, _r)

        def setContainerSlotLabelUK(self, theContainerSlotLabelUK, _ctx=None):
            return _M_omero.model.PlateWell._op_setContainerSlotLabelUK.invoke(self, ((theContainerSlotLabelUK, ), _ctx))

        def begin_setContainerSlotLabelUK(self, theContainerSlotLabelUK, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.PlateWell._op_setContainerSlotLabelUK.begin(self, ((theContainerSlotLabelUK, ), _response, _ex, _sent, _ctx))

        def end_setContainerSlotLabelUK(self, _r):
            return _M_omero.model.PlateWell._op_setContainerSlotLabelUK.end(self, _r)

        def getContainerSlotIndexUK(self, _ctx=None):
            return _M_omero.model.PlateWell._op_getContainerSlotIndexUK.invoke(self, ((), _ctx))

        def begin_getContainerSlotIndexUK(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.PlateWell._op_getContainerSlotIndexUK.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getContainerSlotIndexUK(self, _r):
            return _M_omero.model.PlateWell._op_getContainerSlotIndexUK.end(self, _r)

        def setContainerSlotIndexUK(self, theContainerSlotIndexUK, _ctx=None):
            return _M_omero.model.PlateWell._op_setContainerSlotIndexUK.invoke(self, ((theContainerSlotIndexUK, ), _ctx))

        def begin_setContainerSlotIndexUK(self, theContainerSlotIndexUK, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.PlateWell._op_setContainerSlotIndexUK.begin(self, ((theContainerSlotIndexUK, ), _response, _ex, _sent, _ctx))

        def end_setContainerSlotIndexUK(self, _r):
            return _M_omero.model.PlateWell._op_setContainerSlotIndexUK.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.model.PlateWellPrx.ice_checkedCast(proxy, '::omero::model::PlateWell', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.model.PlateWellPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_omero.model._t_PlateWellPrx = IcePy.defineProxy('::omero::model::PlateWell', PlateWellPrx)

    _M_omero.model._t_PlateWell = IcePy.declareClass('::omero::model::PlateWell')

    _M_omero.model._t_PlateWell = IcePy.defineClass('::omero::model::PlateWell', PlateWell, (), True, _M_omero.model._t_Vessel, (), (
        ('_label', (), _M_omero._t_RString),
        ('_slot', (), _M_omero._t_RInt),
        ('_container', (), _M_omero.model._t_TiterPlate),
        ('_containerSlotLabelUK', (), _M_omero._t_RString),
        ('_containerSlotIndexUK', (), _M_omero._t_RString)
    ))
    PlateWell._ice_type = _M_omero.model._t_PlateWell

    PlateWell._op_getLabel = IcePy.Operation('getLabel', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RString, ())
    PlateWell._op_setLabel = IcePy.Operation('setLabel', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RString),), (), None, ())
    PlateWell._op_getSlot = IcePy.Operation('getSlot', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RInt, ())
    PlateWell._op_setSlot = IcePy.Operation('setSlot', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RInt),), (), None, ())
    PlateWell._op_getContainer = IcePy.Operation('getContainer', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero.model._t_TiterPlate, ())
    PlateWell._op_setContainer = IcePy.Operation('setContainer', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_TiterPlate),), (), None, ())
    PlateWell._op_getContainerSlotLabelUK = IcePy.Operation('getContainerSlotLabelUK', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RString, ())
    PlateWell._op_setContainerSlotLabelUK = IcePy.Operation('setContainerSlotLabelUK', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RString),), (), None, ())
    PlateWell._op_getContainerSlotIndexUK = IcePy.Operation('getContainerSlotIndexUK', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RString, ())
    PlateWell._op_setContainerSlotIndexUK = IcePy.Operation('setContainerSlotIndexUK', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RString),), (), None, ())

    _M_omero.model.PlateWell = PlateWell
    del PlateWell

    _M_omero.model.PlateWellPrx = PlateWellPrx
    del PlateWellPrx

# End of module omero.model

__name__ = 'omero'

# End of module omero
