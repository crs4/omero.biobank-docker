# **********************************************************************
#
# Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.4.2
#
# <auto-generated>
#
# Generated from file `Lane.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy, __builtin__
import omero_model_IObject_ice
import omero_RTypes_ice
import omero_System_ice
import omero_Collections_ice
import omero_model_Container_ice

# Included module omero
_M_omero = Ice.openModule('omero')

# Included module omero.model
_M_omero.model = Ice.openModule('omero.model')

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module omero.sys
_M_omero.sys = Ice.openModule('omero.sys')

# Included module omero.api
_M_omero.api = Ice.openModule('omero.api')

# Start of module omero
__name__ = 'omero'

# Start of module omero.model
__name__ = 'omero.model'

if not _M_omero.model.__dict__.has_key('FlowCell'):
    _M_omero.model._t_FlowCell = IcePy.declareClass('::omero::model::FlowCell')
    _M_omero.model._t_FlowCellPrx = IcePy.declareProxy('::omero::model::FlowCell')

if not _M_omero.model.__dict__.has_key('ContainerStatus'):
    _M_omero.model._t_ContainerStatus = IcePy.declareClass('::omero::model::ContainerStatus')
    _M_omero.model._t_ContainerStatusPrx = IcePy.declareProxy('::omero::model::ContainerStatus')

if not _M_omero.model.__dict__.has_key('Action'):
    _M_omero.model._t_Action = IcePy.declareClass('::omero::model::Action')
    _M_omero.model._t_ActionPrx = IcePy.declareProxy('::omero::model::Action')

if not _M_omero.model.__dict__.has_key('Details'):
    _M_omero.model._t_Details = IcePy.declareClass('::omero::model::Details')
    _M_omero.model._t_DetailsPrx = IcePy.declareProxy('::omero::model::Details')

if not _M_omero.model.__dict__.has_key('Lane'):
    _M_omero.model.Lane = Ice.createTempClass()
    class Lane(_M_omero.model.Container):
        def __init__(self, _id=None, _details=None, _loaded=False, _version=None, _vid=None, _label=None, _creationDate=None, _action=None, _lastUpdate=None, _barcode=None, _status=None, _flowCell=None, _slot=None, _laneUK=None):
            if __builtin__.type(self) == _M_omero.model.Lane:
                raise RuntimeError('omero.model.Lane is an abstract class')
            _M_omero.model.Container.__init__(self, _id, _details, _loaded, _version, _vid, _label, _creationDate, _action, _lastUpdate, _barcode, _status)
            self._flowCell = _flowCell
            self._slot = _slot
            self._laneUK = _laneUK

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::model::Container', '::omero::model::IObject', '::omero::model::Lane', '::omero::model::VLCollection')

        def ice_id(self, current=None):
            return '::omero::model::Lane'

        def ice_staticId():
            return '::omero::model::Lane'
        ice_staticId = staticmethod(ice_staticId)

        def getFlowCell(self, current=None):
            pass

        def setFlowCell(self, theFlowCell, current=None):
            pass

        def getSlot(self, current=None):
            pass

        def setSlot(self, theSlot, current=None):
            pass

        def getLaneUK(self, current=None):
            pass

        def setLaneUK(self, theLaneUK, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_omero.model._t_Lane)

        __repr__ = __str__

    _M_omero.model.LanePrx = Ice.createTempClass()
    class LanePrx(_M_omero.model.ContainerPrx):

        def getFlowCell(self, _ctx=None):
            return _M_omero.model.Lane._op_getFlowCell.invoke(self, ((), _ctx))

        def begin_getFlowCell(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.Lane._op_getFlowCell.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getFlowCell(self, _r):
            return _M_omero.model.Lane._op_getFlowCell.end(self, _r)

        def setFlowCell(self, theFlowCell, _ctx=None):
            return _M_omero.model.Lane._op_setFlowCell.invoke(self, ((theFlowCell, ), _ctx))

        def begin_setFlowCell(self, theFlowCell, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.Lane._op_setFlowCell.begin(self, ((theFlowCell, ), _response, _ex, _sent, _ctx))

        def end_setFlowCell(self, _r):
            return _M_omero.model.Lane._op_setFlowCell.end(self, _r)

        def getSlot(self, _ctx=None):
            return _M_omero.model.Lane._op_getSlot.invoke(self, ((), _ctx))

        def begin_getSlot(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.Lane._op_getSlot.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getSlot(self, _r):
            return _M_omero.model.Lane._op_getSlot.end(self, _r)

        def setSlot(self, theSlot, _ctx=None):
            return _M_omero.model.Lane._op_setSlot.invoke(self, ((theSlot, ), _ctx))

        def begin_setSlot(self, theSlot, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.Lane._op_setSlot.begin(self, ((theSlot, ), _response, _ex, _sent, _ctx))

        def end_setSlot(self, _r):
            return _M_omero.model.Lane._op_setSlot.end(self, _r)

        def getLaneUK(self, _ctx=None):
            return _M_omero.model.Lane._op_getLaneUK.invoke(self, ((), _ctx))

        def begin_getLaneUK(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.Lane._op_getLaneUK.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getLaneUK(self, _r):
            return _M_omero.model.Lane._op_getLaneUK.end(self, _r)

        def setLaneUK(self, theLaneUK, _ctx=None):
            return _M_omero.model.Lane._op_setLaneUK.invoke(self, ((theLaneUK, ), _ctx))

        def begin_setLaneUK(self, theLaneUK, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.Lane._op_setLaneUK.begin(self, ((theLaneUK, ), _response, _ex, _sent, _ctx))

        def end_setLaneUK(self, _r):
            return _M_omero.model.Lane._op_setLaneUK.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.model.LanePrx.ice_checkedCast(proxy, '::omero::model::Lane', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.model.LanePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_omero.model._t_LanePrx = IcePy.defineProxy('::omero::model::Lane', LanePrx)

    _M_omero.model._t_Lane = IcePy.declareClass('::omero::model::Lane')

    _M_omero.model._t_Lane = IcePy.defineClass('::omero::model::Lane', Lane, (), True, _M_omero.model._t_Container, (), (
        ('_flowCell', (), _M_omero.model._t_FlowCell),
        ('_slot', (), _M_omero._t_RInt),
        ('_laneUK', (), _M_omero._t_RString)
    ))
    Lane._ice_type = _M_omero.model._t_Lane

    Lane._op_getFlowCell = IcePy.Operation('getFlowCell', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero.model._t_FlowCell, ())
    Lane._op_setFlowCell = IcePy.Operation('setFlowCell', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_FlowCell),), (), None, ())
    Lane._op_getSlot = IcePy.Operation('getSlot', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RInt, ())
    Lane._op_setSlot = IcePy.Operation('setSlot', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RInt),), (), None, ())
    Lane._op_getLaneUK = IcePy.Operation('getLaneUK', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RString, ())
    Lane._op_setLaneUK = IcePy.Operation('setLaneUK', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RString),), (), None, ())

    _M_omero.model.Lane = Lane
    del Lane

    _M_omero.model.LanePrx = LanePrx
    del LanePrx

# End of module omero.model

__name__ = 'omero'

# End of module omero
