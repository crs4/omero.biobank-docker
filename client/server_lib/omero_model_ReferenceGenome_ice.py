# **********************************************************************
#
# Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.4.2
#
# <auto-generated>
#
# Generated from file `ReferenceGenome.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy, __builtin__
import omero_model_IObject_ice
import omero_RTypes_ice
import omero_System_ice
import omero_Collections_ice
import omero_model_DataSample_ice

# Included module omero
_M_omero = Ice.openModule('omero')

# Included module omero.model
_M_omero.model = Ice.openModule('omero.model')

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module omero.sys
_M_omero.sys = Ice.openModule('omero.sys')

# Included module omero.api
_M_omero.api = Ice.openModule('omero.api')

# Start of module omero
__name__ = 'omero'

# Start of module omero.model
__name__ = 'omero.model'

if not _M_omero.model.__dict__.has_key('DataSampleStatus'):
    _M_omero.model._t_DataSampleStatus = IcePy.declareClass('::omero::model::DataSampleStatus')
    _M_omero.model._t_DataSampleStatusPrx = IcePy.declareProxy('::omero::model::DataSampleStatus')

if not _M_omero.model.__dict__.has_key('Action'):
    _M_omero.model._t_Action = IcePy.declareClass('::omero::model::Action')
    _M_omero.model._t_ActionPrx = IcePy.declareProxy('::omero::model::Action')

if not _M_omero.model.__dict__.has_key('Details'):
    _M_omero.model._t_Details = IcePy.declareClass('::omero::model::Details')
    _M_omero.model._t_DetailsPrx = IcePy.declareProxy('::omero::model::Details')

if not _M_omero.model.__dict__.has_key('ReferenceGenome'):
    _M_omero.model.ReferenceGenome = Ice.createTempClass()
    class ReferenceGenome(_M_omero.model.DataSample):
        def __init__(self, _id=None, _details=None, _loaded=False, _version=None, _vid=None, _label=None, _creationDate=None, _status=None, _action=None, _nChroms=None, _maker=None, _model=None, _release=None, _referenceGenomeUK=None):
            if __builtin__.type(self) == _M_omero.model.ReferenceGenome:
                raise RuntimeError('omero.model.ReferenceGenome is an abstract class')
            _M_omero.model.DataSample.__init__(self, _id, _details, _loaded, _version, _vid, _label, _creationDate, _status, _action)
            self._nChroms = _nChroms
            self._maker = _maker
            self._model = _model
            self._release = _release
            self._referenceGenomeUK = _referenceGenomeUK

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::model::DataSample', '::omero::model::IObject', '::omero::model::ReferenceGenome')

        def ice_id(self, current=None):
            return '::omero::model::ReferenceGenome'

        def ice_staticId():
            return '::omero::model::ReferenceGenome'
        ice_staticId = staticmethod(ice_staticId)

        def getNChroms(self, current=None):
            pass

        def setNChroms(self, theNChroms, current=None):
            pass

        def getMaker(self, current=None):
            pass

        def setMaker(self, theMaker, current=None):
            pass

        def getModel(self, current=None):
            pass

        def setModel(self, theModel, current=None):
            pass

        def getRelease(self, current=None):
            pass

        def setRelease(self, theRelease, current=None):
            pass

        def getReferenceGenomeUK(self, current=None):
            pass

        def setReferenceGenomeUK(self, theReferenceGenomeUK, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_omero.model._t_ReferenceGenome)

        __repr__ = __str__

    _M_omero.model.ReferenceGenomePrx = Ice.createTempClass()
    class ReferenceGenomePrx(_M_omero.model.DataSamplePrx):

        def getNChroms(self, _ctx=None):
            return _M_omero.model.ReferenceGenome._op_getNChroms.invoke(self, ((), _ctx))

        def begin_getNChroms(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.ReferenceGenome._op_getNChroms.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getNChroms(self, _r):
            return _M_omero.model.ReferenceGenome._op_getNChroms.end(self, _r)

        def setNChroms(self, theNChroms, _ctx=None):
            return _M_omero.model.ReferenceGenome._op_setNChroms.invoke(self, ((theNChroms, ), _ctx))

        def begin_setNChroms(self, theNChroms, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.ReferenceGenome._op_setNChroms.begin(self, ((theNChroms, ), _response, _ex, _sent, _ctx))

        def end_setNChroms(self, _r):
            return _M_omero.model.ReferenceGenome._op_setNChroms.end(self, _r)

        def getMaker(self, _ctx=None):
            return _M_omero.model.ReferenceGenome._op_getMaker.invoke(self, ((), _ctx))

        def begin_getMaker(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.ReferenceGenome._op_getMaker.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getMaker(self, _r):
            return _M_omero.model.ReferenceGenome._op_getMaker.end(self, _r)

        def setMaker(self, theMaker, _ctx=None):
            return _M_omero.model.ReferenceGenome._op_setMaker.invoke(self, ((theMaker, ), _ctx))

        def begin_setMaker(self, theMaker, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.ReferenceGenome._op_setMaker.begin(self, ((theMaker, ), _response, _ex, _sent, _ctx))

        def end_setMaker(self, _r):
            return _M_omero.model.ReferenceGenome._op_setMaker.end(self, _r)

        def getModel(self, _ctx=None):
            return _M_omero.model.ReferenceGenome._op_getModel.invoke(self, ((), _ctx))

        def begin_getModel(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.ReferenceGenome._op_getModel.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getModel(self, _r):
            return _M_omero.model.ReferenceGenome._op_getModel.end(self, _r)

        def setModel(self, theModel, _ctx=None):
            return _M_omero.model.ReferenceGenome._op_setModel.invoke(self, ((theModel, ), _ctx))

        def begin_setModel(self, theModel, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.ReferenceGenome._op_setModel.begin(self, ((theModel, ), _response, _ex, _sent, _ctx))

        def end_setModel(self, _r):
            return _M_omero.model.ReferenceGenome._op_setModel.end(self, _r)

        def getRelease(self, _ctx=None):
            return _M_omero.model.ReferenceGenome._op_getRelease.invoke(self, ((), _ctx))

        def begin_getRelease(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.ReferenceGenome._op_getRelease.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getRelease(self, _r):
            return _M_omero.model.ReferenceGenome._op_getRelease.end(self, _r)

        def setRelease(self, theRelease, _ctx=None):
            return _M_omero.model.ReferenceGenome._op_setRelease.invoke(self, ((theRelease, ), _ctx))

        def begin_setRelease(self, theRelease, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.ReferenceGenome._op_setRelease.begin(self, ((theRelease, ), _response, _ex, _sent, _ctx))

        def end_setRelease(self, _r):
            return _M_omero.model.ReferenceGenome._op_setRelease.end(self, _r)

        def getReferenceGenomeUK(self, _ctx=None):
            return _M_omero.model.ReferenceGenome._op_getReferenceGenomeUK.invoke(self, ((), _ctx))

        def begin_getReferenceGenomeUK(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.ReferenceGenome._op_getReferenceGenomeUK.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getReferenceGenomeUK(self, _r):
            return _M_omero.model.ReferenceGenome._op_getReferenceGenomeUK.end(self, _r)

        def setReferenceGenomeUK(self, theReferenceGenomeUK, _ctx=None):
            return _M_omero.model.ReferenceGenome._op_setReferenceGenomeUK.invoke(self, ((theReferenceGenomeUK, ), _ctx))

        def begin_setReferenceGenomeUK(self, theReferenceGenomeUK, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.ReferenceGenome._op_setReferenceGenomeUK.begin(self, ((theReferenceGenomeUK, ), _response, _ex, _sent, _ctx))

        def end_setReferenceGenomeUK(self, _r):
            return _M_omero.model.ReferenceGenome._op_setReferenceGenomeUK.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.model.ReferenceGenomePrx.ice_checkedCast(proxy, '::omero::model::ReferenceGenome', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.model.ReferenceGenomePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_omero.model._t_ReferenceGenomePrx = IcePy.defineProxy('::omero::model::ReferenceGenome', ReferenceGenomePrx)

    _M_omero.model._t_ReferenceGenome = IcePy.declareClass('::omero::model::ReferenceGenome')

    _M_omero.model._t_ReferenceGenome = IcePy.defineClass('::omero::model::ReferenceGenome', ReferenceGenome, (), True, _M_omero.model._t_DataSample, (), (
        ('_nChroms', (), _M_omero._t_RInt),
        ('_maker', (), _M_omero._t_RString),
        ('_model', (), _M_omero._t_RString),
        ('_release', (), _M_omero._t_RString),
        ('_referenceGenomeUK', (), _M_omero._t_RString)
    ))
    ReferenceGenome._ice_type = _M_omero.model._t_ReferenceGenome

    ReferenceGenome._op_getNChroms = IcePy.Operation('getNChroms', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RInt, ())
    ReferenceGenome._op_setNChroms = IcePy.Operation('setNChroms', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RInt),), (), None, ())
    ReferenceGenome._op_getMaker = IcePy.Operation('getMaker', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RString, ())
    ReferenceGenome._op_setMaker = IcePy.Operation('setMaker', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RString),), (), None, ())
    ReferenceGenome._op_getModel = IcePy.Operation('getModel', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RString, ())
    ReferenceGenome._op_setModel = IcePy.Operation('setModel', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RString),), (), None, ())
    ReferenceGenome._op_getRelease = IcePy.Operation('getRelease', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RString, ())
    ReferenceGenome._op_setRelease = IcePy.Operation('setRelease', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RString),), (), None, ())
    ReferenceGenome._op_getReferenceGenomeUK = IcePy.Operation('getReferenceGenomeUK', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RString, ())
    ReferenceGenome._op_setReferenceGenomeUK = IcePy.Operation('setReferenceGenomeUK', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RString),), (), None, ())

    _M_omero.model.ReferenceGenome = ReferenceGenome
    del ReferenceGenome

    _M_omero.model.ReferenceGenomePrx = ReferenceGenomePrx
    del ReferenceGenomePrx

# End of module omero.model

__name__ = 'omero'

# End of module omero
