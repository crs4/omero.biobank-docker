# **********************************************************************
#
# Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.4.2
#
# <auto-generated>
#
# Generated from file `Container.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy, __builtin__
import omero_model_IObject_ice
import omero_RTypes_ice
import omero_System_ice
import omero_Collections_ice
import omero_model_VLCollection_ice

# Included module omero
_M_omero = Ice.openModule('omero')

# Included module omero.model
_M_omero.model = Ice.openModule('omero.model')

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module omero.sys
_M_omero.sys = Ice.openModule('omero.sys')

# Included module omero.api
_M_omero.api = Ice.openModule('omero.api')

# Start of module omero
__name__ = 'omero'

# Start of module omero.model
__name__ = 'omero.model'

if not _M_omero.model.__dict__.has_key('ContainerStatus'):
    _M_omero.model._t_ContainerStatus = IcePy.declareClass('::omero::model::ContainerStatus')
    _M_omero.model._t_ContainerStatusPrx = IcePy.declareProxy('::omero::model::ContainerStatus')

if not _M_omero.model.__dict__.has_key('Action'):
    _M_omero.model._t_Action = IcePy.declareClass('::omero::model::Action')
    _M_omero.model._t_ActionPrx = IcePy.declareProxy('::omero::model::Action')

if not _M_omero.model.__dict__.has_key('Details'):
    _M_omero.model._t_Details = IcePy.declareClass('::omero::model::Details')
    _M_omero.model._t_DetailsPrx = IcePy.declareProxy('::omero::model::Details')

if not _M_omero.model.__dict__.has_key('Container'):
    _M_omero.model.Container = Ice.createTempClass()
    class Container(_M_omero.model.VLCollection):
        def __init__(self, _id=None, _details=None, _loaded=False, _version=None, _vid=None, _label=None, _creationDate=None, _action=None, _lastUpdate=None, _barcode=None, _status=None):
            if __builtin__.type(self) == _M_omero.model.Container:
                raise RuntimeError('omero.model.Container is an abstract class')
            _M_omero.model.VLCollection.__init__(self, _id, _details, _loaded, _version, _vid, _label, _creationDate, _action, _lastUpdate)
            self._barcode = _barcode
            self._status = _status

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::model::Container', '::omero::model::IObject', '::omero::model::VLCollection')

        def ice_id(self, current=None):
            return '::omero::model::Container'

        def ice_staticId():
            return '::omero::model::Container'
        ice_staticId = staticmethod(ice_staticId)

        def getBarcode(self, current=None):
            pass

        def setBarcode(self, theBarcode, current=None):
            pass

        def getStatus(self, current=None):
            pass

        def setStatus(self, theStatus, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_omero.model._t_Container)

        __repr__ = __str__

    _M_omero.model.ContainerPrx = Ice.createTempClass()
    class ContainerPrx(_M_omero.model.VLCollectionPrx):

        def getBarcode(self, _ctx=None):
            return _M_omero.model.Container._op_getBarcode.invoke(self, ((), _ctx))

        def begin_getBarcode(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.Container._op_getBarcode.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getBarcode(self, _r):
            return _M_omero.model.Container._op_getBarcode.end(self, _r)

        def setBarcode(self, theBarcode, _ctx=None):
            return _M_omero.model.Container._op_setBarcode.invoke(self, ((theBarcode, ), _ctx))

        def begin_setBarcode(self, theBarcode, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.Container._op_setBarcode.begin(self, ((theBarcode, ), _response, _ex, _sent, _ctx))

        def end_setBarcode(self, _r):
            return _M_omero.model.Container._op_setBarcode.end(self, _r)

        def getStatus(self, _ctx=None):
            return _M_omero.model.Container._op_getStatus.invoke(self, ((), _ctx))

        def begin_getStatus(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.Container._op_getStatus.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getStatus(self, _r):
            return _M_omero.model.Container._op_getStatus.end(self, _r)

        def setStatus(self, theStatus, _ctx=None):
            return _M_omero.model.Container._op_setStatus.invoke(self, ((theStatus, ), _ctx))

        def begin_setStatus(self, theStatus, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.Container._op_setStatus.begin(self, ((theStatus, ), _response, _ex, _sent, _ctx))

        def end_setStatus(self, _r):
            return _M_omero.model.Container._op_setStatus.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.model.ContainerPrx.ice_checkedCast(proxy, '::omero::model::Container', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.model.ContainerPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_omero.model._t_ContainerPrx = IcePy.defineProxy('::omero::model::Container', ContainerPrx)

    _M_omero.model._t_Container = IcePy.declareClass('::omero::model::Container')

    _M_omero.model._t_Container = IcePy.defineClass('::omero::model::Container', Container, (), True, _M_omero.model._t_VLCollection, (), (
        ('_barcode', (), _M_omero._t_RString),
        ('_status', (), _M_omero.model._t_ContainerStatus)
    ))
    Container._ice_type = _M_omero.model._t_Container

    Container._op_getBarcode = IcePy.Operation('getBarcode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RString, ())
    Container._op_setBarcode = IcePy.Operation('setBarcode', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RString),), (), None, ())
    Container._op_getStatus = IcePy.Operation('getStatus', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero.model._t_ContainerStatus, ())
    Container._op_setStatus = IcePy.Operation('setStatus', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_ContainerStatus),), (), None, ())

    _M_omero.model.Container = Container
    del Container

    _M_omero.model.ContainerPrx = ContainerPrx
    del ContainerPrx

# End of module omero.model

__name__ = 'omero'

# End of module omero
