# **********************************************************************
#
# Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.4.2
#
# <auto-generated>
#
# Generated from file `GenotypeDataSample.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy, __builtin__
import omero_model_IObject_ice
import omero_RTypes_ice
import omero_System_ice
import omero_Collections_ice
import omero_model_DataSample_ice

# Included module omero
_M_omero = Ice.openModule('omero')

# Included module omero.model
_M_omero.model = Ice.openModule('omero.model')

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module omero.sys
_M_omero.sys = Ice.openModule('omero.sys')

# Included module omero.api
_M_omero.api = Ice.openModule('omero.api')

# Start of module omero
__name__ = 'omero'

# Start of module omero.model
__name__ = 'omero.model'

if not _M_omero.model.__dict__.has_key('SNPMarkersSet'):
    _M_omero.model._t_SNPMarkersSet = IcePy.declareClass('::omero::model::SNPMarkersSet')
    _M_omero.model._t_SNPMarkersSetPrx = IcePy.declareProxy('::omero::model::SNPMarkersSet')

if not _M_omero.model.__dict__.has_key('DataSampleStatus'):
    _M_omero.model._t_DataSampleStatus = IcePy.declareClass('::omero::model::DataSampleStatus')
    _M_omero.model._t_DataSampleStatusPrx = IcePy.declareProxy('::omero::model::DataSampleStatus')

if not _M_omero.model.__dict__.has_key('Action'):
    _M_omero.model._t_Action = IcePy.declareClass('::omero::model::Action')
    _M_omero.model._t_ActionPrx = IcePy.declareProxy('::omero::model::Action')

if not _M_omero.model.__dict__.has_key('Details'):
    _M_omero.model._t_Details = IcePy.declareClass('::omero::model::Details')
    _M_omero.model._t_DetailsPrx = IcePy.declareProxy('::omero::model::Details')

if not _M_omero.model.__dict__.has_key('GenotypeDataSample'):
    _M_omero.model.GenotypeDataSample = Ice.createTempClass()
    class GenotypeDataSample(_M_omero.model.DataSample):
        def __init__(self, _id=None, _details=None, _loaded=False, _version=None, _vid=None, _label=None, _creationDate=None, _status=None, _action=None, _snpMarkersSet=None):
            if __builtin__.type(self) == _M_omero.model.GenotypeDataSample:
                raise RuntimeError('omero.model.GenotypeDataSample is an abstract class')
            _M_omero.model.DataSample.__init__(self, _id, _details, _loaded, _version, _vid, _label, _creationDate, _status, _action)
            self._snpMarkersSet = _snpMarkersSet

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::model::DataSample', '::omero::model::GenotypeDataSample', '::omero::model::IObject')

        def ice_id(self, current=None):
            return '::omero::model::GenotypeDataSample'

        def ice_staticId():
            return '::omero::model::GenotypeDataSample'
        ice_staticId = staticmethod(ice_staticId)

        def getSnpMarkersSet(self, current=None):
            pass

        def setSnpMarkersSet(self, theSnpMarkersSet, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_omero.model._t_GenotypeDataSample)

        __repr__ = __str__

    _M_omero.model.GenotypeDataSamplePrx = Ice.createTempClass()
    class GenotypeDataSamplePrx(_M_omero.model.DataSamplePrx):

        def getSnpMarkersSet(self, _ctx=None):
            return _M_omero.model.GenotypeDataSample._op_getSnpMarkersSet.invoke(self, ((), _ctx))

        def begin_getSnpMarkersSet(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.GenotypeDataSample._op_getSnpMarkersSet.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getSnpMarkersSet(self, _r):
            return _M_omero.model.GenotypeDataSample._op_getSnpMarkersSet.end(self, _r)

        def setSnpMarkersSet(self, theSnpMarkersSet, _ctx=None):
            return _M_omero.model.GenotypeDataSample._op_setSnpMarkersSet.invoke(self, ((theSnpMarkersSet, ), _ctx))

        def begin_setSnpMarkersSet(self, theSnpMarkersSet, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.GenotypeDataSample._op_setSnpMarkersSet.begin(self, ((theSnpMarkersSet, ), _response, _ex, _sent, _ctx))

        def end_setSnpMarkersSet(self, _r):
            return _M_omero.model.GenotypeDataSample._op_setSnpMarkersSet.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.model.GenotypeDataSamplePrx.ice_checkedCast(proxy, '::omero::model::GenotypeDataSample', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.model.GenotypeDataSamplePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_omero.model._t_GenotypeDataSamplePrx = IcePy.defineProxy('::omero::model::GenotypeDataSample', GenotypeDataSamplePrx)

    _M_omero.model._t_GenotypeDataSample = IcePy.declareClass('::omero::model::GenotypeDataSample')

    _M_omero.model._t_GenotypeDataSample = IcePy.defineClass('::omero::model::GenotypeDataSample', GenotypeDataSample, (), True, _M_omero.model._t_DataSample, (), (('_snpMarkersSet', (), _M_omero.model._t_SNPMarkersSet),))
    GenotypeDataSample._ice_type = _M_omero.model._t_GenotypeDataSample

    GenotypeDataSample._op_getSnpMarkersSet = IcePy.Operation('getSnpMarkersSet', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero.model._t_SNPMarkersSet, ())
    GenotypeDataSample._op_setSnpMarkersSet = IcePy.Operation('setSnpMarkersSet', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_SNPMarkersSet),), (), None, ())

    _M_omero.model.GenotypeDataSample = GenotypeDataSample
    del GenotypeDataSample

    _M_omero.model.GenotypeDataSamplePrx = GenotypeDataSamplePrx
    del GenotypeDataSamplePrx

# End of module omero.model

__name__ = 'omero'

# End of module omero
