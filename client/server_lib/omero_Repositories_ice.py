# **********************************************************************
#
# Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.4.2
#
# <auto-generated>
#
# Generated from file `Repositories.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy, __builtin__
import omero_ModelF_ice
import omero_ServicesF_ice
import omero_System_ice
import omero_Collections_ice
import omero_ServerErrors_ice

# Included module omero
_M_omero = Ice.openModule('omero')

# Included module omero.model
_M_omero.model = Ice.openModule('omero.model')

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module Glacier2
_M_Glacier2 = Ice.openModule('Glacier2')

# Included module omero.sys
_M_omero.sys = Ice.openModule('omero.sys')

# Included module omero.api
_M_omero.api = Ice.openModule('omero.api')

# Included module omero.grid
_M_omero.grid = Ice.openModule('omero.grid')

# Start of module omero
__name__ = 'omero'

# Start of module omero.grid
__name__ = 'omero.grid'

if not _M_omero.grid.__dict__.has_key('RepositoryListConfig'):
    _M_omero.grid.RepositoryListConfig = Ice.createTempClass()
    class RepositoryListConfig(Ice.Object):
        def __init__(self, depth=0, files=False, dirs=False, hidden=False, registered=False, showOriginalFiles=False):
            self.depth = depth
            self.files = files
            self.dirs = dirs
            self.hidden = hidden
            self.registered = registered
            self.showOriginalFiles = showOriginalFiles

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::grid::RepositoryListConfig')

        def ice_id(self, current=None):
            return '::omero::grid::RepositoryListConfig'

        def ice_staticId():
            return '::omero::grid::RepositoryListConfig'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_omero.grid._t_RepositoryListConfig)

        __repr__ = __str__

    _M_omero.grid.RepositoryListConfigPrx = Ice.createTempClass()
    class RepositoryListConfigPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.grid.RepositoryListConfigPrx.ice_checkedCast(proxy, '::omero::grid::RepositoryListConfig', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.grid.RepositoryListConfigPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_omero.grid._t_RepositoryListConfigPrx = IcePy.defineProxy('::omero::grid::RepositoryListConfig', RepositoryListConfigPrx)

    _M_omero.grid._t_RepositoryListConfig = IcePy.defineClass('::omero::grid::RepositoryListConfig', RepositoryListConfig, (), False, None, (), (
        ('depth', (), IcePy._t_int),
        ('files', (), IcePy._t_bool),
        ('dirs', (), IcePy._t_bool),
        ('hidden', (), IcePy._t_bool),
        ('registered', (), IcePy._t_bool),
        ('showOriginalFiles', (), IcePy._t_bool)
    ))
    RepositoryListConfig._ice_type = _M_omero.grid._t_RepositoryListConfig

    _M_omero.grid.RepositoryListConfig = RepositoryListConfig
    del RepositoryListConfig

    _M_omero.grid.RepositoryListConfigPrx = RepositoryListConfigPrx
    del RepositoryListConfigPrx

if not _M_omero.grid.__dict__.has_key('FileSet'):
    _M_omero.grid.FileSet = Ice.createTempClass()
    class FileSet(Ice.Object):
        def __init__(self, importableImage=False, fileName='', parentFile=None, hidden=False, dir=False, reader='', imageCount=0, usedFiles=None, imageList=None):
            self.importableImage = importableImage
            self.fileName = fileName
            self.parentFile = parentFile
            self.hidden = hidden
            self.dir = dir
            self.reader = reader
            self.imageCount = imageCount
            self.usedFiles = usedFiles
            self.imageList = imageList

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::grid::FileSet')

        def ice_id(self, current=None):
            return '::omero::grid::FileSet'

        def ice_staticId():
            return '::omero::grid::FileSet'
        ice_staticId = staticmethod(ice_staticId)

        def __str__(self):
            return IcePy.stringify(self, _M_omero.grid._t_FileSet)

        __repr__ = __str__

    _M_omero.grid.FileSetPrx = Ice.createTempClass()
    class FileSetPrx(Ice.ObjectPrx):

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.grid.FileSetPrx.ice_checkedCast(proxy, '::omero::grid::FileSet', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.grid.FileSetPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_omero.grid._t_FileSetPrx = IcePy.defineProxy('::omero::grid::FileSet', FileSetPrx)

    _M_omero.grid._t_FileSet = IcePy.declareClass('::omero::grid::FileSet')

    _M_omero.grid._t_FileSet = IcePy.defineClass('::omero::grid::FileSet', FileSet, (), False, None, (), (
        ('importableImage', (), IcePy._t_bool),
        ('fileName', (), IcePy._t_string),
        ('parentFile', (), _M_omero.model._t_OriginalFile),
        ('hidden', (), IcePy._t_bool),
        ('dir', (), IcePy._t_bool),
        ('reader', (), IcePy._t_string),
        ('imageCount', (), IcePy._t_int),
        ('usedFiles', (), _M_omero.api._t_IObjectList),
        ('imageList', (), _M_omero.api._t_ImageList)
    ))
    FileSet._ice_type = _M_omero.grid._t_FileSet

    _M_omero.grid.FileSet = FileSet
    del FileSet

    _M_omero.grid.FileSetPrx = FileSetPrx
    del FileSetPrx

if not _M_omero.grid.__dict__.has_key('_t_FileSetList'):
    _M_omero.grid._t_FileSetList = IcePy.defineSequence('::omero::grid::FileSetList', (), _M_omero.grid._t_FileSet)

if not _M_omero.grid.__dict__.has_key('Repository'):
    _M_omero.grid.Repository = Ice.createTempClass()
    class Repository(Ice.Object):
        '''Client-accessible interface representing a single mount point on the server-side.'''
        def __init__(self):
            if __builtin__.type(self) == _M_omero.grid.Repository:
                raise RuntimeError('omero.grid.Repository is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::grid::Repository')

        def ice_id(self, current=None):
            return '::omero::grid::Repository'

        def ice_staticId():
            return '::omero::grid::Repository'
        ice_staticId = staticmethod(ice_staticId)

        def root(self, current=None):
            '''Return the OriginalFile descriptor for this Repository. It will have
the path "/"'''
            pass

        def listFiles(self, path, config, current=None):
            pass

        def listFileSets(self, path, config, current=None):
            pass

        def mimetype(self, path, current=None):
            '''Returns the best-guess mimetype for the given path.'''
            pass

        def register(self, path, mimetype, current=None):
            '''Create an OriginalFile in the database for the given path.'''
            pass

        def registerOriginalFile(self, omeroFile, current=None):
            '''Create an entry in the database for the given OriginalFile.

If the given OriginalFile is null a ValidationException is thrown. 
Otherwise, an entry is added and an unloaded IObject returned with id set.'''
            pass

        def registerFileSet(self, keyFile, imageList, current=None):
            '''Create entries in the database for the OriginalFile and Images in the imageList.

If the given ImageList is null or empty the OriginalFile is registered only. 
If the OriginalFile is null a ValidationException is thrown. 
Otherwise, objects are added and list containing a loaded OriginalFile followed 
by the loaded Images is returned with ids set.'''
            pass

        def importFileSet(self, keyFile, current=None):
            '''Import image metadata using the parent orginal file.

If the id does not exist a ValidationException is thrown. 
Otherwise, the image set linked to that original file will have its metadata imported.
The imported pixels list is returned.'''
            pass

        def load(self, path, current=None):
            '''Load the OriginalFile at the given path with annotations and
associated Pixels (if present). If the path does not point to
an OriginalFile, a ValidationException exception is thrown.

TODO should this just return null instead?'''
            pass

        def read(self, path, current=None):
            '''Returns a special RawFileStore which permits only reading.
Any call to a write or configuration method will throw an
ApiUsageException.'''
            pass

        def write(self, path, current=None):
            '''Returns a special RawFileStore which permits only writing.
Any call to a read or configuraiton method will throw an
ApiUsageException. If a file exists at the given path, a
ValidationException will be thrown. Once writing is complete,
call close(), which will seal the file from all further writing.
The SHA1 of the OriginalFile should be checked against the local
value.'''
            pass

        def file(self, id, current=None):
            pass

        def pixels(self, path, current=None):
            pass

        def render(self, path, current=None):
            pass

        def thumbs(self, path, current=None):
            pass

        def fileExists(self, path, current=None):
            '''Returns true if the file or path exists within the repository'''
            pass

        def create(self, path, current=None):
            pass

        def rename(self, path, current=None):
            pass

        def delete(self, path, current=None):
            pass

        def transfer(self, srcPath, target, targetPath, current=None):
            pass

        def getThumbnail(self, path, current=None):
            '''Return the full path of a jpg thumbnail of the image file
given in the path argument.'''
            pass

        def getThumbnailByIndex(self, path, imageIndex, current=None):
            '''Return the full path of a jpg thumbnail of the image 
at the imageIndex in the file set represented by
the file given in the path argument.'''
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_omero.grid._t_Repository)

        __repr__ = __str__

    _M_omero.grid.RepositoryPrx = Ice.createTempClass()
    class RepositoryPrx(Ice.ObjectPrx):

        '''Return the OriginalFile descriptor for this Repository. It will have
the path "/"'''
        def root(self, _ctx=None):
            return _M_omero.grid.Repository._op_root.invoke(self, ((), _ctx))

        '''Return the OriginalFile descriptor for this Repository. It will have
the path "/"'''
        def begin_root(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.Repository._op_root.begin(self, ((), _response, _ex, _sent, _ctx))

        '''Return the OriginalFile descriptor for this Repository. It will have
the path "/"'''
        def end_root(self, _r):
            return _M_omero.grid.Repository._op_root.end(self, _r)

        '''Return the OriginalFile descriptor for this Repository. It will have
the path "/"'''
        def root_async(self, _cb, _ctx=None):
            return _M_omero.grid.Repository._op_root.invokeAsync(self, (_cb, (), _ctx))

        def listFiles(self, path, config, _ctx=None):
            return _M_omero.grid.Repository._op_listFiles.invoke(self, ((path, config), _ctx))

        def begin_listFiles(self, path, config, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.Repository._op_listFiles.begin(self, ((path, config), _response, _ex, _sent, _ctx))

        def end_listFiles(self, _r):
            return _M_omero.grid.Repository._op_listFiles.end(self, _r)

        def listFiles_async(self, _cb, path, config, _ctx=None):
            return _M_omero.grid.Repository._op_listFiles.invokeAsync(self, (_cb, (path, config), _ctx))

        def listFileSets(self, path, config, _ctx=None):
            return _M_omero.grid.Repository._op_listFileSets.invoke(self, ((path, config), _ctx))

        def begin_listFileSets(self, path, config, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.Repository._op_listFileSets.begin(self, ((path, config), _response, _ex, _sent, _ctx))

        def end_listFileSets(self, _r):
            return _M_omero.grid.Repository._op_listFileSets.end(self, _r)

        def listFileSets_async(self, _cb, path, config, _ctx=None):
            return _M_omero.grid.Repository._op_listFileSets.invokeAsync(self, (_cb, (path, config), _ctx))

        '''Returns the best-guess mimetype for the given path.'''
        def mimetype(self, path, _ctx=None):
            return _M_omero.grid.Repository._op_mimetype.invoke(self, ((path, ), _ctx))

        '''Returns the best-guess mimetype for the given path.'''
        def begin_mimetype(self, path, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.Repository._op_mimetype.begin(self, ((path, ), _response, _ex, _sent, _ctx))

        '''Returns the best-guess mimetype for the given path.'''
        def end_mimetype(self, _r):
            return _M_omero.grid.Repository._op_mimetype.end(self, _r)

        '''Returns the best-guess mimetype for the given path.'''
        def mimetype_async(self, _cb, path, _ctx=None):
            return _M_omero.grid.Repository._op_mimetype.invokeAsync(self, (_cb, (path, ), _ctx))

        '''Create an OriginalFile in the database for the given path.'''
        def register(self, path, mimetype, _ctx=None):
            return _M_omero.grid.Repository._op_register.invoke(self, ((path, mimetype), _ctx))

        '''Create an OriginalFile in the database for the given path.'''
        def begin_register(self, path, mimetype, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.Repository._op_register.begin(self, ((path, mimetype), _response, _ex, _sent, _ctx))

        '''Create an OriginalFile in the database for the given path.'''
        def end_register(self, _r):
            return _M_omero.grid.Repository._op_register.end(self, _r)

        '''Create an OriginalFile in the database for the given path.'''
        def register_async(self, _cb, path, mimetype, _ctx=None):
            return _M_omero.grid.Repository._op_register.invokeAsync(self, (_cb, (path, mimetype), _ctx))

        '''Create an entry in the database for the given OriginalFile.

If the given OriginalFile is null a ValidationException is thrown. 
Otherwise, an entry is added and an unloaded IObject returned with id set.'''
        def registerOriginalFile(self, omeroFile, _ctx=None):
            return _M_omero.grid.Repository._op_registerOriginalFile.invoke(self, ((omeroFile, ), _ctx))

        '''Create an entry in the database for the given OriginalFile.

If the given OriginalFile is null a ValidationException is thrown. 
Otherwise, an entry is added and an unloaded IObject returned with id set.'''
        def begin_registerOriginalFile(self, omeroFile, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.Repository._op_registerOriginalFile.begin(self, ((omeroFile, ), _response, _ex, _sent, _ctx))

        '''Create an entry in the database for the given OriginalFile.

If the given OriginalFile is null a ValidationException is thrown. 
Otherwise, an entry is added and an unloaded IObject returned with id set.'''
        def end_registerOriginalFile(self, _r):
            return _M_omero.grid.Repository._op_registerOriginalFile.end(self, _r)

        '''Create an entry in the database for the given OriginalFile.

If the given OriginalFile is null a ValidationException is thrown. 
Otherwise, an entry is added and an unloaded IObject returned with id set.'''
        def registerOriginalFile_async(self, _cb, omeroFile, _ctx=None):
            return _M_omero.grid.Repository._op_registerOriginalFile.invokeAsync(self, (_cb, (omeroFile, ), _ctx))

        '''Create entries in the database for the OriginalFile and Images in the imageList.

If the given ImageList is null or empty the OriginalFile is registered only. 
If the OriginalFile is null a ValidationException is thrown. 
Otherwise, objects are added and list containing a loaded OriginalFile followed 
by the loaded Images is returned with ids set.'''
        def registerFileSet(self, keyFile, imageList, _ctx=None):
            return _M_omero.grid.Repository._op_registerFileSet.invoke(self, ((keyFile, imageList), _ctx))

        '''Create entries in the database for the OriginalFile and Images in the imageList.

If the given ImageList is null or empty the OriginalFile is registered only. 
If the OriginalFile is null a ValidationException is thrown. 
Otherwise, objects are added and list containing a loaded OriginalFile followed 
by the loaded Images is returned with ids set.'''
        def begin_registerFileSet(self, keyFile, imageList, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.Repository._op_registerFileSet.begin(self, ((keyFile, imageList), _response, _ex, _sent, _ctx))

        '''Create entries in the database for the OriginalFile and Images in the imageList.

If the given ImageList is null or empty the OriginalFile is registered only. 
If the OriginalFile is null a ValidationException is thrown. 
Otherwise, objects are added and list containing a loaded OriginalFile followed 
by the loaded Images is returned with ids set.'''
        def end_registerFileSet(self, _r):
            return _M_omero.grid.Repository._op_registerFileSet.end(self, _r)

        '''Create entries in the database for the OriginalFile and Images in the imageList.

If the given ImageList is null or empty the OriginalFile is registered only. 
If the OriginalFile is null a ValidationException is thrown. 
Otherwise, objects are added and list containing a loaded OriginalFile followed 
by the loaded Images is returned with ids set.'''
        def registerFileSet_async(self, _cb, keyFile, imageList, _ctx=None):
            return _M_omero.grid.Repository._op_registerFileSet.invokeAsync(self, (_cb, (keyFile, imageList), _ctx))

        '''Import image metadata using the parent orginal file.

If the id does not exist a ValidationException is thrown. 
Otherwise, the image set linked to that original file will have its metadata imported.
The imported pixels list is returned.'''
        def importFileSet(self, keyFile, _ctx=None):
            return _M_omero.grid.Repository._op_importFileSet.invoke(self, ((keyFile, ), _ctx))

        '''Import image metadata using the parent orginal file.

If the id does not exist a ValidationException is thrown. 
Otherwise, the image set linked to that original file will have its metadata imported.
The imported pixels list is returned.'''
        def begin_importFileSet(self, keyFile, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.Repository._op_importFileSet.begin(self, ((keyFile, ), _response, _ex, _sent, _ctx))

        '''Import image metadata using the parent orginal file.

If the id does not exist a ValidationException is thrown. 
Otherwise, the image set linked to that original file will have its metadata imported.
The imported pixels list is returned.'''
        def end_importFileSet(self, _r):
            return _M_omero.grid.Repository._op_importFileSet.end(self, _r)

        '''Import image metadata using the parent orginal file.

If the id does not exist a ValidationException is thrown. 
Otherwise, the image set linked to that original file will have its metadata imported.
The imported pixels list is returned.'''
        def importFileSet_async(self, _cb, keyFile, _ctx=None):
            return _M_omero.grid.Repository._op_importFileSet.invokeAsync(self, (_cb, (keyFile, ), _ctx))

        '''Load the OriginalFile at the given path with annotations and
associated Pixels (if present). If the path does not point to
an OriginalFile, a ValidationException exception is thrown.

TODO should this just return null instead?'''
        def load(self, path, _ctx=None):
            return _M_omero.grid.Repository._op_load.invoke(self, ((path, ), _ctx))

        '''Load the OriginalFile at the given path with annotations and
associated Pixels (if present). If the path does not point to
an OriginalFile, a ValidationException exception is thrown.

TODO should this just return null instead?'''
        def begin_load(self, path, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.Repository._op_load.begin(self, ((path, ), _response, _ex, _sent, _ctx))

        '''Load the OriginalFile at the given path with annotations and
associated Pixels (if present). If the path does not point to
an OriginalFile, a ValidationException exception is thrown.

TODO should this just return null instead?'''
        def end_load(self, _r):
            return _M_omero.grid.Repository._op_load.end(self, _r)

        '''Load the OriginalFile at the given path with annotations and
associated Pixels (if present). If the path does not point to
an OriginalFile, a ValidationException exception is thrown.

TODO should this just return null instead?'''
        def load_async(self, _cb, path, _ctx=None):
            return _M_omero.grid.Repository._op_load.invokeAsync(self, (_cb, (path, ), _ctx))

        '''Returns a special RawFileStore which permits only reading.
Any call to a write or configuration method will throw an
ApiUsageException.'''
        def read(self, path, _ctx=None):
            return _M_omero.grid.Repository._op_read.invoke(self, ((path, ), _ctx))

        '''Returns a special RawFileStore which permits only reading.
Any call to a write or configuration method will throw an
ApiUsageException.'''
        def begin_read(self, path, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.Repository._op_read.begin(self, ((path, ), _response, _ex, _sent, _ctx))

        '''Returns a special RawFileStore which permits only reading.
Any call to a write or configuration method will throw an
ApiUsageException.'''
        def end_read(self, _r):
            return _M_omero.grid.Repository._op_read.end(self, _r)

        '''Returns a special RawFileStore which permits only reading.
Any call to a write or configuration method will throw an
ApiUsageException.'''
        def read_async(self, _cb, path, _ctx=None):
            return _M_omero.grid.Repository._op_read.invokeAsync(self, (_cb, (path, ), _ctx))

        '''Returns a special RawFileStore which permits only writing.
Any call to a read or configuraiton method will throw an
ApiUsageException. If a file exists at the given path, a
ValidationException will be thrown. Once writing is complete,
call close(), which will seal the file from all further writing.
The SHA1 of the OriginalFile should be checked against the local
value.'''
        def write(self, path, _ctx=None):
            return _M_omero.grid.Repository._op_write.invoke(self, ((path, ), _ctx))

        '''Returns a special RawFileStore which permits only writing.
Any call to a read or configuraiton method will throw an
ApiUsageException. If a file exists at the given path, a
ValidationException will be thrown. Once writing is complete,
call close(), which will seal the file from all further writing.
The SHA1 of the OriginalFile should be checked against the local
value.'''
        def begin_write(self, path, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.Repository._op_write.begin(self, ((path, ), _response, _ex, _sent, _ctx))

        '''Returns a special RawFileStore which permits only writing.
Any call to a read or configuraiton method will throw an
ApiUsageException. If a file exists at the given path, a
ValidationException will be thrown. Once writing is complete,
call close(), which will seal the file from all further writing.
The SHA1 of the OriginalFile should be checked against the local
value.'''
        def end_write(self, _r):
            return _M_omero.grid.Repository._op_write.end(self, _r)

        '''Returns a special RawFileStore which permits only writing.
Any call to a read or configuraiton method will throw an
ApiUsageException. If a file exists at the given path, a
ValidationException will be thrown. Once writing is complete,
call close(), which will seal the file from all further writing.
The SHA1 of the OriginalFile should be checked against the local
value.'''
        def write_async(self, _cb, path, _ctx=None):
            return _M_omero.grid.Repository._op_write.invokeAsync(self, (_cb, (path, ), _ctx))

        def file(self, id, _ctx=None):
            return _M_omero.grid.Repository._op_file.invoke(self, ((id, ), _ctx))

        def begin_file(self, id, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.Repository._op_file.begin(self, ((id, ), _response, _ex, _sent, _ctx))

        def end_file(self, _r):
            return _M_omero.grid.Repository._op_file.end(self, _r)

        def file_async(self, _cb, id, _ctx=None):
            return _M_omero.grid.Repository._op_file.invokeAsync(self, (_cb, (id, ), _ctx))

        def pixels(self, path, _ctx=None):
            return _M_omero.grid.Repository._op_pixels.invoke(self, ((path, ), _ctx))

        def begin_pixels(self, path, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.Repository._op_pixels.begin(self, ((path, ), _response, _ex, _sent, _ctx))

        def end_pixels(self, _r):
            return _M_omero.grid.Repository._op_pixels.end(self, _r)

        def pixels_async(self, _cb, path, _ctx=None):
            return _M_omero.grid.Repository._op_pixels.invokeAsync(self, (_cb, (path, ), _ctx))

        def render(self, path, _ctx=None):
            return _M_omero.grid.Repository._op_render.invoke(self, ((path, ), _ctx))

        def begin_render(self, path, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.Repository._op_render.begin(self, ((path, ), _response, _ex, _sent, _ctx))

        def end_render(self, _r):
            return _M_omero.grid.Repository._op_render.end(self, _r)

        def render_async(self, _cb, path, _ctx=None):
            return _M_omero.grid.Repository._op_render.invokeAsync(self, (_cb, (path, ), _ctx))

        def thumbs(self, path, _ctx=None):
            return _M_omero.grid.Repository._op_thumbs.invoke(self, ((path, ), _ctx))

        def begin_thumbs(self, path, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.Repository._op_thumbs.begin(self, ((path, ), _response, _ex, _sent, _ctx))

        def end_thumbs(self, _r):
            return _M_omero.grid.Repository._op_thumbs.end(self, _r)

        def thumbs_async(self, _cb, path, _ctx=None):
            return _M_omero.grid.Repository._op_thumbs.invokeAsync(self, (_cb, (path, ), _ctx))

        '''Returns true if the file or path exists within the repository'''
        def fileExists(self, path, _ctx=None):
            return _M_omero.grid.Repository._op_fileExists.invoke(self, ((path, ), _ctx))

        '''Returns true if the file or path exists within the repository'''
        def begin_fileExists(self, path, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.Repository._op_fileExists.begin(self, ((path, ), _response, _ex, _sent, _ctx))

        '''Returns true if the file or path exists within the repository'''
        def end_fileExists(self, _r):
            return _M_omero.grid.Repository._op_fileExists.end(self, _r)

        '''Returns true if the file or path exists within the repository'''
        def fileExists_async(self, _cb, path, _ctx=None):
            return _M_omero.grid.Repository._op_fileExists.invokeAsync(self, (_cb, (path, ), _ctx))

        def create(self, path, _ctx=None):
            return _M_omero.grid.Repository._op_create.invoke(self, ((path, ), _ctx))

        def begin_create(self, path, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.Repository._op_create.begin(self, ((path, ), _response, _ex, _sent, _ctx))

        def end_create(self, _r):
            return _M_omero.grid.Repository._op_create.end(self, _r)

        def create_async(self, _cb, path, _ctx=None):
            return _M_omero.grid.Repository._op_create.invokeAsync(self, (_cb, (path, ), _ctx))

        def rename(self, path, _ctx=None):
            return _M_omero.grid.Repository._op_rename.invoke(self, ((path, ), _ctx))

        def begin_rename(self, path, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.Repository._op_rename.begin(self, ((path, ), _response, _ex, _sent, _ctx))

        def end_rename(self, _r):
            return _M_omero.grid.Repository._op_rename.end(self, _r)

        def rename_async(self, _cb, path, _ctx=None):
            return _M_omero.grid.Repository._op_rename.invokeAsync(self, (_cb, (path, ), _ctx))

        def delete(self, path, _ctx=None):
            return _M_omero.grid.Repository._op_delete.invoke(self, ((path, ), _ctx))

        def begin_delete(self, path, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.Repository._op_delete.begin(self, ((path, ), _response, _ex, _sent, _ctx))

        def end_delete(self, _r):
            return _M_omero.grid.Repository._op_delete.end(self, _r)

        def delete_async(self, _cb, path, _ctx=None):
            return _M_omero.grid.Repository._op_delete.invokeAsync(self, (_cb, (path, ), _ctx))

        def transfer(self, srcPath, target, targetPath, _ctx=None):
            return _M_omero.grid.Repository._op_transfer.invoke(self, ((srcPath, target, targetPath), _ctx))

        def begin_transfer(self, srcPath, target, targetPath, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.Repository._op_transfer.begin(self, ((srcPath, target, targetPath), _response, _ex, _sent, _ctx))

        def end_transfer(self, _r):
            return _M_omero.grid.Repository._op_transfer.end(self, _r)

        def transfer_async(self, _cb, srcPath, target, targetPath, _ctx=None):
            return _M_omero.grid.Repository._op_transfer.invokeAsync(self, (_cb, (srcPath, target, targetPath), _ctx))

        '''Return the full path of a jpg thumbnail of the image file
given in the path argument.'''
        def getThumbnail(self, path, _ctx=None):
            return _M_omero.grid.Repository._op_getThumbnail.invoke(self, ((path, ), _ctx))

        '''Return the full path of a jpg thumbnail of the image file
given in the path argument.'''
        def begin_getThumbnail(self, path, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.Repository._op_getThumbnail.begin(self, ((path, ), _response, _ex, _sent, _ctx))

        '''Return the full path of a jpg thumbnail of the image file
given in the path argument.'''
        def end_getThumbnail(self, _r):
            return _M_omero.grid.Repository._op_getThumbnail.end(self, _r)

        '''Return the full path of a jpg thumbnail of the image file
given in the path argument.'''
        def getThumbnail_async(self, _cb, path, _ctx=None):
            return _M_omero.grid.Repository._op_getThumbnail.invokeAsync(self, (_cb, (path, ), _ctx))

        '''Return the full path of a jpg thumbnail of the image 
at the imageIndex in the file set represented by
the file given in the path argument.'''
        def getThumbnailByIndex(self, path, imageIndex, _ctx=None):
            return _M_omero.grid.Repository._op_getThumbnailByIndex.invoke(self, ((path, imageIndex), _ctx))

        '''Return the full path of a jpg thumbnail of the image 
at the imageIndex in the file set represented by
the file given in the path argument.'''
        def begin_getThumbnailByIndex(self, path, imageIndex, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.Repository._op_getThumbnailByIndex.begin(self, ((path, imageIndex), _response, _ex, _sent, _ctx))

        '''Return the full path of a jpg thumbnail of the image 
at the imageIndex in the file set represented by
the file given in the path argument.'''
        def end_getThumbnailByIndex(self, _r):
            return _M_omero.grid.Repository._op_getThumbnailByIndex.end(self, _r)

        '''Return the full path of a jpg thumbnail of the image 
at the imageIndex in the file set represented by
the file given in the path argument.'''
        def getThumbnailByIndex_async(self, _cb, path, imageIndex, _ctx=None):
            return _M_omero.grid.Repository._op_getThumbnailByIndex.invokeAsync(self, (_cb, (path, imageIndex), _ctx))

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.grid.RepositoryPrx.ice_checkedCast(proxy, '::omero::grid::Repository', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.grid.RepositoryPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_omero.grid._t_RepositoryPrx = IcePy.defineProxy('::omero::grid::Repository', RepositoryPrx)

    _M_omero.grid._t_Repository = IcePy.defineClass('::omero::grid::Repository', Repository, (), True, None, (), ())
    Repository._ice_type = _M_omero.grid._t_Repository

    Repository._op_root = IcePy.Operation('root', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero.model._t_OriginalFile, (_M_omero._t_ServerError,))
    Repository._op_listFiles = IcePy.Operation('listFiles', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string), ((), _M_omero.grid._t_RepositoryListConfig)), (), _M_omero.api._t_OriginalFileList, (_M_omero._t_ServerError,))
    Repository._op_listFileSets = IcePy.Operation('listFileSets', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string), ((), _M_omero.grid._t_RepositoryListConfig)), (), _M_omero.grid._t_FileSetList, (_M_omero._t_ServerError,))
    Repository._op_mimetype = IcePy.Operation('mimetype', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (), IcePy._t_string, (_M_omero._t_ServerError,))
    Repository._op_register = IcePy.Operation('register', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string), ((), _M_omero._t_RString)), (), _M_omero.model._t_OriginalFile, (_M_omero._t_ServerError,))
    Repository._op_registerOriginalFile = IcePy.Operation('registerOriginalFile', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_OriginalFile),), (), _M_omero.model._t_OriginalFile, (_M_omero._t_ServerError,))
    Repository._op_registerFileSet = IcePy.Operation('registerFileSet', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_OriginalFile), ((), _M_omero.api._t_ImageList)), (), _M_omero.api._t_IObjectList, (_M_omero._t_ServerError,))
    Repository._op_importFileSet = IcePy.Operation('importFileSet', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_OriginalFile),), (), _M_omero.api._t_ImageList, (_M_omero._t_ServerError,))
    Repository._op_load = IcePy.Operation('load', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (), _M_omero.model._t_OriginalFile, (_M_omero._t_ServerError,))
    Repository._op_read = IcePy.Operation('read', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (), _M_omero.api._t_RawFileStorePrx, (_M_omero._t_ServerError,))
    Repository._op_write = IcePy.Operation('write', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (), _M_omero.api._t_RawFileStorePrx, (_M_omero._t_ServerError,))
    Repository._op_file = IcePy.Operation('file', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_long),), (), _M_omero.api._t_RawFileStorePrx, (_M_omero._t_ServerError,))
    Repository._op_pixels = IcePy.Operation('pixels', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (), _M_omero.api._t_RawPixelsStorePrx, (_M_omero._t_ServerError,))
    Repository._op_render = IcePy.Operation('render', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (), _M_omero.api._t_RenderingEnginePrx, (_M_omero._t_ServerError,))
    Repository._op_thumbs = IcePy.Operation('thumbs', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (), _M_omero.api._t_ThumbnailStorePrx, (_M_omero._t_ServerError,))
    Repository._op_fileExists = IcePy.Operation('fileExists', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (), IcePy._t_bool, (_M_omero._t_ServerError,))
    Repository._op_create = IcePy.Operation('create', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (), IcePy._t_bool, (_M_omero._t_ServerError,))
    Repository._op_create.deprecate("currently for testing only")
    Repository._op_rename = IcePy.Operation('rename', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (), None, (_M_omero._t_ServerError,))
    Repository._op_delete = IcePy.Operation('delete', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (), None, (_M_omero._t_ServerError,))
    Repository._op_transfer = IcePy.Operation('transfer', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string), ((), _M_omero.grid._t_RepositoryPrx), ((), IcePy._t_string)), (), None, (_M_omero._t_ServerError,))
    Repository._op_getThumbnail = IcePy.Operation('getThumbnail', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string),), (), IcePy._t_string, (_M_omero._t_ServerError,))
    Repository._op_getThumbnailByIndex = IcePy.Operation('getThumbnailByIndex', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), IcePy._t_string), ((), IcePy._t_int)), (), IcePy._t_string, (_M_omero._t_ServerError,))

    _M_omero.grid.Repository = Repository
    del Repository

    _M_omero.grid.RepositoryPrx = RepositoryPrx
    del RepositoryPrx

if not _M_omero.grid.__dict__.has_key('InternalRepository'):
    _M_omero.grid.InternalRepository = Ice.createTempClass()
    class InternalRepository(Ice.Object):
        '''Internal portion of the API used for management. Not available to clients.'''
        def __init__(self):
            if __builtin__.type(self) == _M_omero.grid.InternalRepository:
                raise RuntimeError('omero.grid.InternalRepository is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::grid::InternalRepository')

        def ice_id(self, current=None):
            return '::omero::grid::InternalRepository'

        def ice_staticId():
            return '::omero::grid::InternalRepository'
        ice_staticId = staticmethod(ice_staticId)

        def createRawFileStore(self, file, current=None):
            pass

        def createRawPixelsStore(self, file, current=None):
            pass

        def createRenderingEngine(self, file, current=None):
            pass

        def createThumbnailStore(self, file, current=None):
            pass

        def getDescription(self, current=None):
            pass

        def getProxy(self, current=None):
            pass

        def getFilePath(self, file, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_omero.grid._t_InternalRepository)

        __repr__ = __str__

    _M_omero.grid.InternalRepositoryPrx = Ice.createTempClass()
    class InternalRepositoryPrx(Ice.ObjectPrx):

        def createRawFileStore(self, file, _ctx=None):
            return _M_omero.grid.InternalRepository._op_createRawFileStore.invoke(self, ((file, ), _ctx))

        def begin_createRawFileStore(self, file, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.InternalRepository._op_createRawFileStore.begin(self, ((file, ), _response, _ex, _sent, _ctx))

        def end_createRawFileStore(self, _r):
            return _M_omero.grid.InternalRepository._op_createRawFileStore.end(self, _r)

        def createRawFileStore_async(self, _cb, file, _ctx=None):
            return _M_omero.grid.InternalRepository._op_createRawFileStore.invokeAsync(self, (_cb, (file, ), _ctx))

        def createRawPixelsStore(self, file, _ctx=None):
            return _M_omero.grid.InternalRepository._op_createRawPixelsStore.invoke(self, ((file, ), _ctx))

        def begin_createRawPixelsStore(self, file, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.InternalRepository._op_createRawPixelsStore.begin(self, ((file, ), _response, _ex, _sent, _ctx))

        def end_createRawPixelsStore(self, _r):
            return _M_omero.grid.InternalRepository._op_createRawPixelsStore.end(self, _r)

        def createRawPixelsStore_async(self, _cb, file, _ctx=None):
            return _M_omero.grid.InternalRepository._op_createRawPixelsStore.invokeAsync(self, (_cb, (file, ), _ctx))

        def createRenderingEngine(self, file, _ctx=None):
            return _M_omero.grid.InternalRepository._op_createRenderingEngine.invoke(self, ((file, ), _ctx))

        def begin_createRenderingEngine(self, file, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.InternalRepository._op_createRenderingEngine.begin(self, ((file, ), _response, _ex, _sent, _ctx))

        def end_createRenderingEngine(self, _r):
            return _M_omero.grid.InternalRepository._op_createRenderingEngine.end(self, _r)

        def createRenderingEngine_async(self, _cb, file, _ctx=None):
            return _M_omero.grid.InternalRepository._op_createRenderingEngine.invokeAsync(self, (_cb, (file, ), _ctx))

        def createThumbnailStore(self, file, _ctx=None):
            return _M_omero.grid.InternalRepository._op_createThumbnailStore.invoke(self, ((file, ), _ctx))

        def begin_createThumbnailStore(self, file, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.InternalRepository._op_createThumbnailStore.begin(self, ((file, ), _response, _ex, _sent, _ctx))

        def end_createThumbnailStore(self, _r):
            return _M_omero.grid.InternalRepository._op_createThumbnailStore.end(self, _r)

        def createThumbnailStore_async(self, _cb, file, _ctx=None):
            return _M_omero.grid.InternalRepository._op_createThumbnailStore.invokeAsync(self, (_cb, (file, ), _ctx))

        def getDescription(self, _ctx=None):
            return _M_omero.grid.InternalRepository._op_getDescription.invoke(self, ((), _ctx))

        def begin_getDescription(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.InternalRepository._op_getDescription.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getDescription(self, _r):
            return _M_omero.grid.InternalRepository._op_getDescription.end(self, _r)

        def getDescription_async(self, _cb, _ctx=None):
            return _M_omero.grid.InternalRepository._op_getDescription.invokeAsync(self, (_cb, (), _ctx))

        def getProxy(self, _ctx=None):
            return _M_omero.grid.InternalRepository._op_getProxy.invoke(self, ((), _ctx))

        def begin_getProxy(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.InternalRepository._op_getProxy.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getProxy(self, _r):
            return _M_omero.grid.InternalRepository._op_getProxy.end(self, _r)

        def getProxy_async(self, _cb, _ctx=None):
            return _M_omero.grid.InternalRepository._op_getProxy.invokeAsync(self, (_cb, (), _ctx))

        def getFilePath(self, file, _ctx=None):
            return _M_omero.grid.InternalRepository._op_getFilePath.invoke(self, ((file, ), _ctx))

        def begin_getFilePath(self, file, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.grid.InternalRepository._op_getFilePath.begin(self, ((file, ), _response, _ex, _sent, _ctx))

        def end_getFilePath(self, _r):
            return _M_omero.grid.InternalRepository._op_getFilePath.end(self, _r)

        def getFilePath_async(self, _cb, file, _ctx=None):
            return _M_omero.grid.InternalRepository._op_getFilePath.invokeAsync(self, (_cb, (file, ), _ctx))

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.grid.InternalRepositoryPrx.ice_checkedCast(proxy, '::omero::grid::InternalRepository', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.grid.InternalRepositoryPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_omero.grid._t_InternalRepositoryPrx = IcePy.defineProxy('::omero::grid::InternalRepository', InternalRepositoryPrx)

    _M_omero.grid._t_InternalRepository = IcePy.defineClass('::omero::grid::InternalRepository', InternalRepository, (), True, None, (), ())
    InternalRepository._ice_type = _M_omero.grid._t_InternalRepository

    InternalRepository._op_createRawFileStore = IcePy.Operation('createRawFileStore', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_OriginalFile),), (), _M_omero.api._t_RawFileStorePrx, (_M_omero._t_ServerError,))
    InternalRepository._op_createRawPixelsStore = IcePy.Operation('createRawPixelsStore', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_OriginalFile),), (), _M_omero.api._t_RawPixelsStorePrx, (_M_omero._t_ServerError,))
    InternalRepository._op_createRenderingEngine = IcePy.Operation('createRenderingEngine', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_OriginalFile),), (), _M_omero.api._t_RenderingEnginePrx, (_M_omero._t_ServerError,))
    InternalRepository._op_createThumbnailStore = IcePy.Operation('createThumbnailStore', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_OriginalFile),), (), _M_omero.api._t_ThumbnailStorePrx, (_M_omero._t_ServerError,))
    InternalRepository._op_getDescription = IcePy.Operation('getDescription', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero.model._t_OriginalFile, (_M_omero._t_ServerError,))
    InternalRepository._op_getProxy = IcePy.Operation('getProxy', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero.grid._t_RepositoryPrx, (_M_omero._t_ServerError,))
    InternalRepository._op_getFilePath = IcePy.Operation('getFilePath', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_OriginalFile),), (), IcePy._t_string, (_M_omero._t_ServerError,))

    _M_omero.grid.InternalRepository = InternalRepository
    del InternalRepository

    _M_omero.grid.InternalRepositoryPrx = InternalRepositoryPrx
    del InternalRepositoryPrx

if not _M_omero.grid.__dict__.has_key('_t_RepositoryProxyList'):
    _M_omero.grid._t_RepositoryProxyList = IcePy.defineSequence('::omero::grid::RepositoryProxyList', (), _M_omero.grid._t_RepositoryPrx)

if not _M_omero.grid.__dict__.has_key('RepositoryMap'):
    _M_omero.grid.RepositoryMap = Ice.createTempClass()
    class RepositoryMap(object):
        '''Return value for [omero::grid::SharedResources].acquireRepositories()'''
        def __init__(self, descriptions=None, proxies=None):
            self.descriptions = descriptions
            self.proxies = proxies

        def __hash__(self):
            _h = 0
            if self.descriptions:
                for _i0 in self.descriptions:
                    _h = 5 * _h + __builtin__.hash(_i0)
            if self.proxies:
                for _i1 in self.proxies:
                    _h = 5 * _h + __builtin__.hash(_i1)
            return _h % 0x7fffffff

        def __lt__(self, other):
            if isinstance(other, _M_omero.grid.RepositoryMap):
                return self.descriptions < other.descriptions or self.proxies < other.proxies
            elif other == None:
                return False
            return NotImplemented

        def __le__(self, other):
            if isinstance(other, _M_omero.grid.RepositoryMap):
                return self.descriptions <= other.descriptions or self.proxies <= other.proxies
            elif other == None:
                return False
            return NotImplemented

        def __eq__(self, other):
            if isinstance(other, _M_omero.grid.RepositoryMap):
                return self.descriptions == other.descriptions and self.proxies == other.proxies
            elif other == None:
                return False
            return NotImplemented

        def __ne__(self, other):
            if isinstance(other, _M_omero.grid.RepositoryMap):
                return self.descriptions != other.descriptions or self.proxies != other.proxies
            elif other == None:
                return True
            return NotImplemented

        def __gt__(self, other):
            if isinstance(other, _M_omero.grid.RepositoryMap):
                return self.descriptions > other.descriptions or self.proxies > other.proxies
            elif other == None:
                return False
            return NotImplemented

        def __ge__(self, other):
            if isinstance(other, _M_omero.grid.RepositoryMap):
                return self.descriptions >= other.descriptions or self.proxies >= other.proxies
            elif other == None:
                return False
            return NotImplemented

        def __str__(self):
            return IcePy.stringify(self, _M_omero.grid._t_RepositoryMap)

        __repr__ = __str__

    _M_omero.grid._t_RepositoryMap = IcePy.defineStruct('::omero::grid::RepositoryMap', RepositoryMap, (), (
        ('descriptions', (), _M_omero.api._t_OriginalFileList),
        ('proxies', (), _M_omero.grid._t_RepositoryProxyList)
    ))

    _M_omero.grid.RepositoryMap = RepositoryMap
    del RepositoryMap

# End of module omero.grid

__name__ = 'omero'

# End of module omero
