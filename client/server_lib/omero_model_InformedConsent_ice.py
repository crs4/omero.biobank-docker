# **********************************************************************
#
# Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.4.2
#
# <auto-generated>
#
# Generated from file `InformedConsent.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy, __builtin__
import omero_model_IObject_ice
import omero_RTypes_ice
import omero_System_ice
import omero_Collections_ice

# Included module omero
_M_omero = Ice.openModule('omero')

# Included module omero.model
_M_omero.model = Ice.openModule('omero.model')

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module omero.sys
_M_omero.sys = Ice.openModule('omero.sys')

# Included module omero.api
_M_omero.api = Ice.openModule('omero.api')

# Start of module omero
__name__ = 'omero'

# Start of module omero.model
__name__ = 'omero.model'

if not _M_omero.model.__dict__.has_key('OriginalFile'):
    _M_omero.model._t_OriginalFile = IcePy.declareClass('::omero::model::OriginalFile')
    _M_omero.model._t_OriginalFilePrx = IcePy.declareProxy('::omero::model::OriginalFile')

if not _M_omero.model.__dict__.has_key('Study'):
    _M_omero.model._t_Study = IcePy.declareClass('::omero::model::Study')
    _M_omero.model._t_StudyPrx = IcePy.declareProxy('::omero::model::Study')

if not _M_omero.model.__dict__.has_key('Details'):
    _M_omero.model._t_Details = IcePy.declareClass('::omero::model::Details')
    _M_omero.model._t_DetailsPrx = IcePy.declareProxy('::omero::model::Details')

if not _M_omero.model.__dict__.has_key('InformedConsent'):
    _M_omero.model.InformedConsent = Ice.createTempClass()
    class InformedConsent(_M_omero.model.IObject):
        def __init__(self, _id=None, _details=None, _loaded=False, _version=None, _vid=None, _label=None, _description=None, _documentPath=None, _documentHash=None, _answersData=None, _refStudy=None, _authors=None, _approvingCommission=None, _approvalDate=None):
            if __builtin__.type(self) == _M_omero.model.InformedConsent:
                raise RuntimeError('omero.model.InformedConsent is an abstract class')
            _M_omero.model.IObject.__init__(self, _id, _details, _loaded)
            self._version = _version
            self._vid = _vid
            self._label = _label
            self._description = _description
            self._documentPath = _documentPath
            self._documentHash = _documentHash
            self._answersData = _answersData
            self._refStudy = _refStudy
            self._authors = _authors
            self._approvingCommission = _approvingCommission
            self._approvalDate = _approvalDate

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::model::IObject', '::omero::model::InformedConsent')

        def ice_id(self, current=None):
            return '::omero::model::InformedConsent'

        def ice_staticId():
            return '::omero::model::InformedConsent'
        ice_staticId = staticmethod(ice_staticId)

        def getVersion(self, current=None):
            pass

        def setVersion(self, theVersion, current=None):
            pass

        def getVid(self, current=None):
            pass

        def setVid(self, theVid, current=None):
            pass

        def getLabel(self, current=None):
            pass

        def setLabel(self, theLabel, current=None):
            pass

        def getDescription(self, current=None):
            pass

        def setDescription(self, theDescription, current=None):
            pass

        def getDocumentPath(self, current=None):
            pass

        def setDocumentPath(self, theDocumentPath, current=None):
            pass

        def getDocumentHash(self, current=None):
            pass

        def setDocumentHash(self, theDocumentHash, current=None):
            pass

        def getAnswersData(self, current=None):
            pass

        def setAnswersData(self, theAnswersData, current=None):
            pass

        def getRefStudy(self, current=None):
            pass

        def setRefStudy(self, theRefStudy, current=None):
            pass

        def getAuthors(self, current=None):
            pass

        def setAuthors(self, theAuthors, current=None):
            pass

        def getApprovingCommission(self, current=None):
            pass

        def setApprovingCommission(self, theApprovingCommission, current=None):
            pass

        def getApprovalDate(self, current=None):
            pass

        def setApprovalDate(self, theApprovalDate, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_omero.model._t_InformedConsent)

        __repr__ = __str__

    _M_omero.model.InformedConsentPrx = Ice.createTempClass()
    class InformedConsentPrx(_M_omero.model.IObjectPrx):

        def getVersion(self, _ctx=None):
            return _M_omero.model.InformedConsent._op_getVersion.invoke(self, ((), _ctx))

        def begin_getVersion(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.InformedConsent._op_getVersion.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getVersion(self, _r):
            return _M_omero.model.InformedConsent._op_getVersion.end(self, _r)

        def setVersion(self, theVersion, _ctx=None):
            return _M_omero.model.InformedConsent._op_setVersion.invoke(self, ((theVersion, ), _ctx))

        def begin_setVersion(self, theVersion, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.InformedConsent._op_setVersion.begin(self, ((theVersion, ), _response, _ex, _sent, _ctx))

        def end_setVersion(self, _r):
            return _M_omero.model.InformedConsent._op_setVersion.end(self, _r)

        def getVid(self, _ctx=None):
            return _M_omero.model.InformedConsent._op_getVid.invoke(self, ((), _ctx))

        def begin_getVid(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.InformedConsent._op_getVid.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getVid(self, _r):
            return _M_omero.model.InformedConsent._op_getVid.end(self, _r)

        def setVid(self, theVid, _ctx=None):
            return _M_omero.model.InformedConsent._op_setVid.invoke(self, ((theVid, ), _ctx))

        def begin_setVid(self, theVid, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.InformedConsent._op_setVid.begin(self, ((theVid, ), _response, _ex, _sent, _ctx))

        def end_setVid(self, _r):
            return _M_omero.model.InformedConsent._op_setVid.end(self, _r)

        def getLabel(self, _ctx=None):
            return _M_omero.model.InformedConsent._op_getLabel.invoke(self, ((), _ctx))

        def begin_getLabel(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.InformedConsent._op_getLabel.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getLabel(self, _r):
            return _M_omero.model.InformedConsent._op_getLabel.end(self, _r)

        def setLabel(self, theLabel, _ctx=None):
            return _M_omero.model.InformedConsent._op_setLabel.invoke(self, ((theLabel, ), _ctx))

        def begin_setLabel(self, theLabel, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.InformedConsent._op_setLabel.begin(self, ((theLabel, ), _response, _ex, _sent, _ctx))

        def end_setLabel(self, _r):
            return _M_omero.model.InformedConsent._op_setLabel.end(self, _r)

        def getDescription(self, _ctx=None):
            return _M_omero.model.InformedConsent._op_getDescription.invoke(self, ((), _ctx))

        def begin_getDescription(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.InformedConsent._op_getDescription.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getDescription(self, _r):
            return _M_omero.model.InformedConsent._op_getDescription.end(self, _r)

        def setDescription(self, theDescription, _ctx=None):
            return _M_omero.model.InformedConsent._op_setDescription.invoke(self, ((theDescription, ), _ctx))

        def begin_setDescription(self, theDescription, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.InformedConsent._op_setDescription.begin(self, ((theDescription, ), _response, _ex, _sent, _ctx))

        def end_setDescription(self, _r):
            return _M_omero.model.InformedConsent._op_setDescription.end(self, _r)

        def getDocumentPath(self, _ctx=None):
            return _M_omero.model.InformedConsent._op_getDocumentPath.invoke(self, ((), _ctx))

        def begin_getDocumentPath(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.InformedConsent._op_getDocumentPath.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getDocumentPath(self, _r):
            return _M_omero.model.InformedConsent._op_getDocumentPath.end(self, _r)

        def setDocumentPath(self, theDocumentPath, _ctx=None):
            return _M_omero.model.InformedConsent._op_setDocumentPath.invoke(self, ((theDocumentPath, ), _ctx))

        def begin_setDocumentPath(self, theDocumentPath, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.InformedConsent._op_setDocumentPath.begin(self, ((theDocumentPath, ), _response, _ex, _sent, _ctx))

        def end_setDocumentPath(self, _r):
            return _M_omero.model.InformedConsent._op_setDocumentPath.end(self, _r)

        def getDocumentHash(self, _ctx=None):
            return _M_omero.model.InformedConsent._op_getDocumentHash.invoke(self, ((), _ctx))

        def begin_getDocumentHash(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.InformedConsent._op_getDocumentHash.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getDocumentHash(self, _r):
            return _M_omero.model.InformedConsent._op_getDocumentHash.end(self, _r)

        def setDocumentHash(self, theDocumentHash, _ctx=None):
            return _M_omero.model.InformedConsent._op_setDocumentHash.invoke(self, ((theDocumentHash, ), _ctx))

        def begin_setDocumentHash(self, theDocumentHash, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.InformedConsent._op_setDocumentHash.begin(self, ((theDocumentHash, ), _response, _ex, _sent, _ctx))

        def end_setDocumentHash(self, _r):
            return _M_omero.model.InformedConsent._op_setDocumentHash.end(self, _r)

        def getAnswersData(self, _ctx=None):
            return _M_omero.model.InformedConsent._op_getAnswersData.invoke(self, ((), _ctx))

        def begin_getAnswersData(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.InformedConsent._op_getAnswersData.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getAnswersData(self, _r):
            return _M_omero.model.InformedConsent._op_getAnswersData.end(self, _r)

        def setAnswersData(self, theAnswersData, _ctx=None):
            return _M_omero.model.InformedConsent._op_setAnswersData.invoke(self, ((theAnswersData, ), _ctx))

        def begin_setAnswersData(self, theAnswersData, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.InformedConsent._op_setAnswersData.begin(self, ((theAnswersData, ), _response, _ex, _sent, _ctx))

        def end_setAnswersData(self, _r):
            return _M_omero.model.InformedConsent._op_setAnswersData.end(self, _r)

        def getRefStudy(self, _ctx=None):
            return _M_omero.model.InformedConsent._op_getRefStudy.invoke(self, ((), _ctx))

        def begin_getRefStudy(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.InformedConsent._op_getRefStudy.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getRefStudy(self, _r):
            return _M_omero.model.InformedConsent._op_getRefStudy.end(self, _r)

        def setRefStudy(self, theRefStudy, _ctx=None):
            return _M_omero.model.InformedConsent._op_setRefStudy.invoke(self, ((theRefStudy, ), _ctx))

        def begin_setRefStudy(self, theRefStudy, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.InformedConsent._op_setRefStudy.begin(self, ((theRefStudy, ), _response, _ex, _sent, _ctx))

        def end_setRefStudy(self, _r):
            return _M_omero.model.InformedConsent._op_setRefStudy.end(self, _r)

        def getAuthors(self, _ctx=None):
            return _M_omero.model.InformedConsent._op_getAuthors.invoke(self, ((), _ctx))

        def begin_getAuthors(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.InformedConsent._op_getAuthors.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getAuthors(self, _r):
            return _M_omero.model.InformedConsent._op_getAuthors.end(self, _r)

        def setAuthors(self, theAuthors, _ctx=None):
            return _M_omero.model.InformedConsent._op_setAuthors.invoke(self, ((theAuthors, ), _ctx))

        def begin_setAuthors(self, theAuthors, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.InformedConsent._op_setAuthors.begin(self, ((theAuthors, ), _response, _ex, _sent, _ctx))

        def end_setAuthors(self, _r):
            return _M_omero.model.InformedConsent._op_setAuthors.end(self, _r)

        def getApprovingCommission(self, _ctx=None):
            return _M_omero.model.InformedConsent._op_getApprovingCommission.invoke(self, ((), _ctx))

        def begin_getApprovingCommission(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.InformedConsent._op_getApprovingCommission.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getApprovingCommission(self, _r):
            return _M_omero.model.InformedConsent._op_getApprovingCommission.end(self, _r)

        def setApprovingCommission(self, theApprovingCommission, _ctx=None):
            return _M_omero.model.InformedConsent._op_setApprovingCommission.invoke(self, ((theApprovingCommission, ), _ctx))

        def begin_setApprovingCommission(self, theApprovingCommission, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.InformedConsent._op_setApprovingCommission.begin(self, ((theApprovingCommission, ), _response, _ex, _sent, _ctx))

        def end_setApprovingCommission(self, _r):
            return _M_omero.model.InformedConsent._op_setApprovingCommission.end(self, _r)

        def getApprovalDate(self, _ctx=None):
            return _M_omero.model.InformedConsent._op_getApprovalDate.invoke(self, ((), _ctx))

        def begin_getApprovalDate(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.InformedConsent._op_getApprovalDate.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getApprovalDate(self, _r):
            return _M_omero.model.InformedConsent._op_getApprovalDate.end(self, _r)

        def setApprovalDate(self, theApprovalDate, _ctx=None):
            return _M_omero.model.InformedConsent._op_setApprovalDate.invoke(self, ((theApprovalDate, ), _ctx))

        def begin_setApprovalDate(self, theApprovalDate, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.InformedConsent._op_setApprovalDate.begin(self, ((theApprovalDate, ), _response, _ex, _sent, _ctx))

        def end_setApprovalDate(self, _r):
            return _M_omero.model.InformedConsent._op_setApprovalDate.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.model.InformedConsentPrx.ice_checkedCast(proxy, '::omero::model::InformedConsent', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.model.InformedConsentPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_omero.model._t_InformedConsentPrx = IcePy.defineProxy('::omero::model::InformedConsent', InformedConsentPrx)

    _M_omero.model._t_InformedConsent = IcePy.declareClass('::omero::model::InformedConsent')

    _M_omero.model._t_InformedConsent = IcePy.defineClass('::omero::model::InformedConsent', InformedConsent, (), True, _M_omero.model._t_IObject, (), (
        ('_version', (), _M_omero._t_RInt),
        ('_vid', (), _M_omero._t_RString),
        ('_label', (), _M_omero._t_RString),
        ('_description', (), _M_omero._t_RString),
        ('_documentPath', (), _M_omero._t_RString),
        ('_documentHash', (), _M_omero._t_RString),
        ('_answersData', (), _M_omero.model._t_OriginalFile),
        ('_refStudy', (), _M_omero.model._t_Study),
        ('_authors', (), _M_omero._t_RString),
        ('_approvingCommission', (), _M_omero._t_RString),
        ('_approvalDate', (), _M_omero._t_RTime)
    ))
    InformedConsent._ice_type = _M_omero.model._t_InformedConsent

    InformedConsent._op_getVersion = IcePy.Operation('getVersion', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RInt, ())
    InformedConsent._op_setVersion = IcePy.Operation('setVersion', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RInt),), (), None, ())
    InformedConsent._op_getVid = IcePy.Operation('getVid', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RString, ())
    InformedConsent._op_setVid = IcePy.Operation('setVid', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RString),), (), None, ())
    InformedConsent._op_getLabel = IcePy.Operation('getLabel', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RString, ())
    InformedConsent._op_setLabel = IcePy.Operation('setLabel', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RString),), (), None, ())
    InformedConsent._op_getDescription = IcePy.Operation('getDescription', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RString, ())
    InformedConsent._op_setDescription = IcePy.Operation('setDescription', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RString),), (), None, ())
    InformedConsent._op_getDocumentPath = IcePy.Operation('getDocumentPath', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RString, ())
    InformedConsent._op_setDocumentPath = IcePy.Operation('setDocumentPath', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RString),), (), None, ())
    InformedConsent._op_getDocumentHash = IcePy.Operation('getDocumentHash', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RString, ())
    InformedConsent._op_setDocumentHash = IcePy.Operation('setDocumentHash', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RString),), (), None, ())
    InformedConsent._op_getAnswersData = IcePy.Operation('getAnswersData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero.model._t_OriginalFile, ())
    InformedConsent._op_setAnswersData = IcePy.Operation('setAnswersData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_OriginalFile),), (), None, ())
    InformedConsent._op_getRefStudy = IcePy.Operation('getRefStudy', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero.model._t_Study, ())
    InformedConsent._op_setRefStudy = IcePy.Operation('setRefStudy', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_Study),), (), None, ())
    InformedConsent._op_getAuthors = IcePy.Operation('getAuthors', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RString, ())
    InformedConsent._op_setAuthors = IcePy.Operation('setAuthors', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RString),), (), None, ())
    InformedConsent._op_getApprovingCommission = IcePy.Operation('getApprovingCommission', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RString, ())
    InformedConsent._op_setApprovingCommission = IcePy.Operation('setApprovingCommission', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RString),), (), None, ())
    InformedConsent._op_getApprovalDate = IcePy.Operation('getApprovalDate', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RTime, ())
    InformedConsent._op_setApprovalDate = IcePy.Operation('setApprovalDate', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RTime),), (), None, ())

    _M_omero.model.InformedConsent = InformedConsent
    del InformedConsent

    _M_omero.model.InformedConsentPrx = InformedConsentPrx
    del InformedConsentPrx

# End of module omero.model

__name__ = 'omero'

# End of module omero
