# **********************************************************************
#
# Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.4.2
#
# <auto-generated>
#
# Generated from file `Study.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy, __builtin__
import omero_model_IObject_ice
import omero_RTypes_ice
import omero_System_ice
import omero_Collections_ice

# Included module omero
_M_omero = Ice.openModule('omero')

# Included module omero.model
_M_omero.model = Ice.openModule('omero.model')

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module omero.sys
_M_omero.sys = Ice.openModule('omero.sys')

# Included module omero.api
_M_omero.api = Ice.openModule('omero.api')

# Start of module omero
__name__ = 'omero'

# Start of module omero.model
__name__ = 'omero.model'

if not _M_omero.model.__dict__.has_key('Details'):
    _M_omero.model._t_Details = IcePy.declareClass('::omero::model::Details')
    _M_omero.model._t_DetailsPrx = IcePy.declareProxy('::omero::model::Details')

if not _M_omero.model.__dict__.has_key('Study'):
    _M_omero.model.Study = Ice.createTempClass()
    class Study(_M_omero.model.IObject):
        def __init__(self, _id=None, _details=None, _loaded=False, _version=None, _vid=None, _label=None, _startDate=None, _endDate=None, _description=None):
            if __builtin__.type(self) == _M_omero.model.Study:
                raise RuntimeError('omero.model.Study is an abstract class')
            _M_omero.model.IObject.__init__(self, _id, _details, _loaded)
            self._version = _version
            self._vid = _vid
            self._label = _label
            self._startDate = _startDate
            self._endDate = _endDate
            self._description = _description

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::model::IObject', '::omero::model::Study')

        def ice_id(self, current=None):
            return '::omero::model::Study'

        def ice_staticId():
            return '::omero::model::Study'
        ice_staticId = staticmethod(ice_staticId)

        def getVersion(self, current=None):
            pass

        def setVersion(self, theVersion, current=None):
            pass

        def getVid(self, current=None):
            pass

        def setVid(self, theVid, current=None):
            pass

        def getLabel(self, current=None):
            pass

        def setLabel(self, theLabel, current=None):
            pass

        def getStartDate(self, current=None):
            pass

        def setStartDate(self, theStartDate, current=None):
            pass

        def getEndDate(self, current=None):
            pass

        def setEndDate(self, theEndDate, current=None):
            pass

        def getDescription(self, current=None):
            pass

        def setDescription(self, theDescription, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_omero.model._t_Study)

        __repr__ = __str__

    _M_omero.model.StudyPrx = Ice.createTempClass()
    class StudyPrx(_M_omero.model.IObjectPrx):

        def getVersion(self, _ctx=None):
            return _M_omero.model.Study._op_getVersion.invoke(self, ((), _ctx))

        def begin_getVersion(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.Study._op_getVersion.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getVersion(self, _r):
            return _M_omero.model.Study._op_getVersion.end(self, _r)

        def setVersion(self, theVersion, _ctx=None):
            return _M_omero.model.Study._op_setVersion.invoke(self, ((theVersion, ), _ctx))

        def begin_setVersion(self, theVersion, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.Study._op_setVersion.begin(self, ((theVersion, ), _response, _ex, _sent, _ctx))

        def end_setVersion(self, _r):
            return _M_omero.model.Study._op_setVersion.end(self, _r)

        def getVid(self, _ctx=None):
            return _M_omero.model.Study._op_getVid.invoke(self, ((), _ctx))

        def begin_getVid(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.Study._op_getVid.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getVid(self, _r):
            return _M_omero.model.Study._op_getVid.end(self, _r)

        def setVid(self, theVid, _ctx=None):
            return _M_omero.model.Study._op_setVid.invoke(self, ((theVid, ), _ctx))

        def begin_setVid(self, theVid, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.Study._op_setVid.begin(self, ((theVid, ), _response, _ex, _sent, _ctx))

        def end_setVid(self, _r):
            return _M_omero.model.Study._op_setVid.end(self, _r)

        def getLabel(self, _ctx=None):
            return _M_omero.model.Study._op_getLabel.invoke(self, ((), _ctx))

        def begin_getLabel(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.Study._op_getLabel.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getLabel(self, _r):
            return _M_omero.model.Study._op_getLabel.end(self, _r)

        def setLabel(self, theLabel, _ctx=None):
            return _M_omero.model.Study._op_setLabel.invoke(self, ((theLabel, ), _ctx))

        def begin_setLabel(self, theLabel, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.Study._op_setLabel.begin(self, ((theLabel, ), _response, _ex, _sent, _ctx))

        def end_setLabel(self, _r):
            return _M_omero.model.Study._op_setLabel.end(self, _r)

        def getStartDate(self, _ctx=None):
            return _M_omero.model.Study._op_getStartDate.invoke(self, ((), _ctx))

        def begin_getStartDate(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.Study._op_getStartDate.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getStartDate(self, _r):
            return _M_omero.model.Study._op_getStartDate.end(self, _r)

        def setStartDate(self, theStartDate, _ctx=None):
            return _M_omero.model.Study._op_setStartDate.invoke(self, ((theStartDate, ), _ctx))

        def begin_setStartDate(self, theStartDate, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.Study._op_setStartDate.begin(self, ((theStartDate, ), _response, _ex, _sent, _ctx))

        def end_setStartDate(self, _r):
            return _M_omero.model.Study._op_setStartDate.end(self, _r)

        def getEndDate(self, _ctx=None):
            return _M_omero.model.Study._op_getEndDate.invoke(self, ((), _ctx))

        def begin_getEndDate(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.Study._op_getEndDate.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getEndDate(self, _r):
            return _M_omero.model.Study._op_getEndDate.end(self, _r)

        def setEndDate(self, theEndDate, _ctx=None):
            return _M_omero.model.Study._op_setEndDate.invoke(self, ((theEndDate, ), _ctx))

        def begin_setEndDate(self, theEndDate, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.Study._op_setEndDate.begin(self, ((theEndDate, ), _response, _ex, _sent, _ctx))

        def end_setEndDate(self, _r):
            return _M_omero.model.Study._op_setEndDate.end(self, _r)

        def getDescription(self, _ctx=None):
            return _M_omero.model.Study._op_getDescription.invoke(self, ((), _ctx))

        def begin_getDescription(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.Study._op_getDescription.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getDescription(self, _r):
            return _M_omero.model.Study._op_getDescription.end(self, _r)

        def setDescription(self, theDescription, _ctx=None):
            return _M_omero.model.Study._op_setDescription.invoke(self, ((theDescription, ), _ctx))

        def begin_setDescription(self, theDescription, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.Study._op_setDescription.begin(self, ((theDescription, ), _response, _ex, _sent, _ctx))

        def end_setDescription(self, _r):
            return _M_omero.model.Study._op_setDescription.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.model.StudyPrx.ice_checkedCast(proxy, '::omero::model::Study', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.model.StudyPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_omero.model._t_StudyPrx = IcePy.defineProxy('::omero::model::Study', StudyPrx)

    _M_omero.model._t_Study = IcePy.declareClass('::omero::model::Study')

    _M_omero.model._t_Study = IcePy.defineClass('::omero::model::Study', Study, (), True, _M_omero.model._t_IObject, (), (
        ('_version', (), _M_omero._t_RInt),
        ('_vid', (), _M_omero._t_RString),
        ('_label', (), _M_omero._t_RString),
        ('_startDate', (), _M_omero._t_RTime),
        ('_endDate', (), _M_omero._t_RTime),
        ('_description', (), _M_omero._t_RString)
    ))
    Study._ice_type = _M_omero.model._t_Study

    Study._op_getVersion = IcePy.Operation('getVersion', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RInt, ())
    Study._op_setVersion = IcePy.Operation('setVersion', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RInt),), (), None, ())
    Study._op_getVid = IcePy.Operation('getVid', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RString, ())
    Study._op_setVid = IcePy.Operation('setVid', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RString),), (), None, ())
    Study._op_getLabel = IcePy.Operation('getLabel', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RString, ())
    Study._op_setLabel = IcePy.Operation('setLabel', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RString),), (), None, ())
    Study._op_getStartDate = IcePy.Operation('getStartDate', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RTime, ())
    Study._op_setStartDate = IcePy.Operation('setStartDate', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RTime),), (), None, ())
    Study._op_getEndDate = IcePy.Operation('getEndDate', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RTime, ())
    Study._op_setEndDate = IcePy.Operation('setEndDate', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RTime),), (), None, ())
    Study._op_getDescription = IcePy.Operation('getDescription', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RString, ())
    Study._op_setDescription = IcePy.Operation('setDescription', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RString),), (), None, ())

    _M_omero.model.Study = Study
    del Study

    _M_omero.model.StudyPrx = StudyPrx
    del StudyPrx

# End of module omero.model

__name__ = 'omero'

# End of module omero
