# **********************************************************************
#
# Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.4.2
#
# <auto-generated>
#
# Generated from file `IlluminaArrayOfArrays.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy, __builtin__
import omero_model_IObject_ice
import omero_RTypes_ice
import omero_System_ice
import omero_Collections_ice
import omero_model_TiterPlate_ice

# Included module omero
_M_omero = Ice.openModule('omero')

# Included module omero.model
_M_omero.model = Ice.openModule('omero.model')

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module omero.sys
_M_omero.sys = Ice.openModule('omero.sys')

# Included module omero.api
_M_omero.api = Ice.openModule('omero.api')

# Start of module omero
__name__ = 'omero'

# Start of module omero.model
__name__ = 'omero.model'

if not _M_omero.model.__dict__.has_key('IlluminaArrayOfArraysType'):
    _M_omero.model._t_IlluminaArrayOfArraysType = IcePy.declareClass('::omero::model::IlluminaArrayOfArraysType')
    _M_omero.model._t_IlluminaArrayOfArraysTypePrx = IcePy.declareProxy('::omero::model::IlluminaArrayOfArraysType')

if not _M_omero.model.__dict__.has_key('IlluminaArrayOfArraysClass'):
    _M_omero.model._t_IlluminaArrayOfArraysClass = IcePy.declareClass('::omero::model::IlluminaArrayOfArraysClass')
    _M_omero.model._t_IlluminaArrayOfArraysClassPrx = IcePy.declareProxy('::omero::model::IlluminaArrayOfArraysClass')

if not _M_omero.model.__dict__.has_key('IlluminaArrayOfArraysAssayType'):
    _M_omero.model._t_IlluminaArrayOfArraysAssayType = IcePy.declareClass('::omero::model::IlluminaArrayOfArraysAssayType')
    _M_omero.model._t_IlluminaArrayOfArraysAssayTypePrx = IcePy.declareProxy('::omero::model::IlluminaArrayOfArraysAssayType')

if not _M_omero.model.__dict__.has_key('ContainerStatus'):
    _M_omero.model._t_ContainerStatus = IcePy.declareClass('::omero::model::ContainerStatus')
    _M_omero.model._t_ContainerStatusPrx = IcePy.declareProxy('::omero::model::ContainerStatus')

if not _M_omero.model.__dict__.has_key('Action'):
    _M_omero.model._t_Action = IcePy.declareClass('::omero::model::Action')
    _M_omero.model._t_ActionPrx = IcePy.declareProxy('::omero::model::Action')

if not _M_omero.model.__dict__.has_key('Details'):
    _M_omero.model._t_Details = IcePy.declareClass('::omero::model::Details')
    _M_omero.model._t_DetailsPrx = IcePy.declareProxy('::omero::model::Details')

if not _M_omero.model.__dict__.has_key('IlluminaArrayOfArrays'):
    _M_omero.model.IlluminaArrayOfArrays = Ice.createTempClass()
    class IlluminaArrayOfArrays(_M_omero.model.TiterPlate):
        def __init__(self, _id=None, _details=None, _loaded=False, _version=None, _vid=None, _label=None, _creationDate=None, _action=None, _lastUpdate=None, _barcode=None, _status=None, _numberOfSlots=None, _rows=None, _columns=None, _type=None, _arrayClass=None, _assayType=None):
            if __builtin__.type(self) == _M_omero.model.IlluminaArrayOfArrays:
                raise RuntimeError('omero.model.IlluminaArrayOfArrays is an abstract class')
            _M_omero.model.TiterPlate.__init__(self, _id, _details, _loaded, _version, _vid, _label, _creationDate, _action, _lastUpdate, _barcode, _status, _numberOfSlots, _rows, _columns)
            self._type = _type
            self._arrayClass = _arrayClass
            self._assayType = _assayType

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::model::Container', '::omero::model::IObject', '::omero::model::IlluminaArrayOfArrays', '::omero::model::SlottedContainer', '::omero::model::TiterPlate', '::omero::model::VLCollection')

        def ice_id(self, current=None):
            return '::omero::model::IlluminaArrayOfArrays'

        def ice_staticId():
            return '::omero::model::IlluminaArrayOfArrays'
        ice_staticId = staticmethod(ice_staticId)

        def getType(self, current=None):
            pass

        def setType(self, theType, current=None):
            pass

        def getArrayClass(self, current=None):
            pass

        def setArrayClass(self, theArrayClass, current=None):
            pass

        def getAssayType(self, current=None):
            pass

        def setAssayType(self, theAssayType, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_omero.model._t_IlluminaArrayOfArrays)

        __repr__ = __str__

    _M_omero.model.IlluminaArrayOfArraysPrx = Ice.createTempClass()
    class IlluminaArrayOfArraysPrx(_M_omero.model.TiterPlatePrx):

        def getType(self, _ctx=None):
            return _M_omero.model.IlluminaArrayOfArrays._op_getType.invoke(self, ((), _ctx))

        def begin_getType(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.IlluminaArrayOfArrays._op_getType.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getType(self, _r):
            return _M_omero.model.IlluminaArrayOfArrays._op_getType.end(self, _r)

        def setType(self, theType, _ctx=None):
            return _M_omero.model.IlluminaArrayOfArrays._op_setType.invoke(self, ((theType, ), _ctx))

        def begin_setType(self, theType, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.IlluminaArrayOfArrays._op_setType.begin(self, ((theType, ), _response, _ex, _sent, _ctx))

        def end_setType(self, _r):
            return _M_omero.model.IlluminaArrayOfArrays._op_setType.end(self, _r)

        def getArrayClass(self, _ctx=None):
            return _M_omero.model.IlluminaArrayOfArrays._op_getArrayClass.invoke(self, ((), _ctx))

        def begin_getArrayClass(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.IlluminaArrayOfArrays._op_getArrayClass.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getArrayClass(self, _r):
            return _M_omero.model.IlluminaArrayOfArrays._op_getArrayClass.end(self, _r)

        def setArrayClass(self, theArrayClass, _ctx=None):
            return _M_omero.model.IlluminaArrayOfArrays._op_setArrayClass.invoke(self, ((theArrayClass, ), _ctx))

        def begin_setArrayClass(self, theArrayClass, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.IlluminaArrayOfArrays._op_setArrayClass.begin(self, ((theArrayClass, ), _response, _ex, _sent, _ctx))

        def end_setArrayClass(self, _r):
            return _M_omero.model.IlluminaArrayOfArrays._op_setArrayClass.end(self, _r)

        def getAssayType(self, _ctx=None):
            return _M_omero.model.IlluminaArrayOfArrays._op_getAssayType.invoke(self, ((), _ctx))

        def begin_getAssayType(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.IlluminaArrayOfArrays._op_getAssayType.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getAssayType(self, _r):
            return _M_omero.model.IlluminaArrayOfArrays._op_getAssayType.end(self, _r)

        def setAssayType(self, theAssayType, _ctx=None):
            return _M_omero.model.IlluminaArrayOfArrays._op_setAssayType.invoke(self, ((theAssayType, ), _ctx))

        def begin_setAssayType(self, theAssayType, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.IlluminaArrayOfArrays._op_setAssayType.begin(self, ((theAssayType, ), _response, _ex, _sent, _ctx))

        def end_setAssayType(self, _r):
            return _M_omero.model.IlluminaArrayOfArrays._op_setAssayType.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.model.IlluminaArrayOfArraysPrx.ice_checkedCast(proxy, '::omero::model::IlluminaArrayOfArrays', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.model.IlluminaArrayOfArraysPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_omero.model._t_IlluminaArrayOfArraysPrx = IcePy.defineProxy('::omero::model::IlluminaArrayOfArrays', IlluminaArrayOfArraysPrx)

    _M_omero.model._t_IlluminaArrayOfArrays = IcePy.declareClass('::omero::model::IlluminaArrayOfArrays')

    _M_omero.model._t_IlluminaArrayOfArrays = IcePy.defineClass('::omero::model::IlluminaArrayOfArrays', IlluminaArrayOfArrays, (), True, _M_omero.model._t_TiterPlate, (), (
        ('_type', (), _M_omero.model._t_IlluminaArrayOfArraysType),
        ('_arrayClass', (), _M_omero.model._t_IlluminaArrayOfArraysClass),
        ('_assayType', (), _M_omero.model._t_IlluminaArrayOfArraysAssayType)
    ))
    IlluminaArrayOfArrays._ice_type = _M_omero.model._t_IlluminaArrayOfArrays

    IlluminaArrayOfArrays._op_getType = IcePy.Operation('getType', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero.model._t_IlluminaArrayOfArraysType, ())
    IlluminaArrayOfArrays._op_setType = IcePy.Operation('setType', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_IlluminaArrayOfArraysType),), (), None, ())
    IlluminaArrayOfArrays._op_getArrayClass = IcePy.Operation('getArrayClass', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero.model._t_IlluminaArrayOfArraysClass, ())
    IlluminaArrayOfArrays._op_setArrayClass = IcePy.Operation('setArrayClass', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_IlluminaArrayOfArraysClass),), (), None, ())
    IlluminaArrayOfArrays._op_getAssayType = IcePy.Operation('getAssayType', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero.model._t_IlluminaArrayOfArraysAssayType, ())
    IlluminaArrayOfArrays._op_setAssayType = IcePy.Operation('setAssayType', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_IlluminaArrayOfArraysAssayType),), (), None, ())

    _M_omero.model.IlluminaArrayOfArrays = IlluminaArrayOfArrays
    del IlluminaArrayOfArrays

    _M_omero.model.IlluminaArrayOfArraysPrx = IlluminaArrayOfArraysPrx
    del IlluminaArrayOfArraysPrx

# End of module omero.model

__name__ = 'omero'

# End of module omero
