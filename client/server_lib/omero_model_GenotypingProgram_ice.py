# **********************************************************************
#
# Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.4.2
#
# <auto-generated>
#
# Generated from file `GenotypingProgram.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy, __builtin__
import omero_model_IObject_ice
import omero_RTypes_ice
import omero_System_ice
import omero_Collections_ice
import omero_model_SoftwareProgram_ice

# Included module omero
_M_omero = Ice.openModule('omero')

# Included module omero.model
_M_omero.model = Ice.openModule('omero.model')

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module omero.sys
_M_omero.sys = Ice.openModule('omero.sys')

# Included module omero.api
_M_omero.api = Ice.openModule('omero.api')

# Start of module omero
__name__ = 'omero'

# Start of module omero.model
__name__ = 'omero.model'

if not _M_omero.model.__dict__.has_key('SNPMarkersSet'):
    _M_omero.model._t_SNPMarkersSet = IcePy.declareClass('::omero::model::SNPMarkersSet')
    _M_omero.model._t_SNPMarkersSetPrx = IcePy.declareProxy('::omero::model::SNPMarkersSet')

if not _M_omero.model.__dict__.has_key('Details'):
    _M_omero.model._t_Details = IcePy.declareClass('::omero::model::Details')
    _M_omero.model._t_DetailsPrx = IcePy.declareProxy('::omero::model::Details')

if not _M_omero.model.__dict__.has_key('GenotypingProgram'):
    _M_omero.model.GenotypingProgram = Ice.createTempClass()
    class GenotypingProgram(_M_omero.model.SoftwareProgram):
        def __init__(self, _id=None, _details=None, _loaded=False, _version=None, _vid=None, _label=None, _maker=None, _model=None, _release=None, _snpMarkersSet=None):
            if __builtin__.type(self) == _M_omero.model.GenotypingProgram:
                raise RuntimeError('omero.model.GenotypingProgram is an abstract class')
            _M_omero.model.SoftwareProgram.__init__(self, _id, _details, _loaded, _version, _vid, _label, _maker, _model, _release)
            self._snpMarkersSet = _snpMarkersSet

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::model::Device', '::omero::model::GenotypingProgram', '::omero::model::IObject', '::omero::model::SoftwareProgram')

        def ice_id(self, current=None):
            return '::omero::model::GenotypingProgram'

        def ice_staticId():
            return '::omero::model::GenotypingProgram'
        ice_staticId = staticmethod(ice_staticId)

        def getSnpMarkersSet(self, current=None):
            pass

        def setSnpMarkersSet(self, theSnpMarkersSet, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_omero.model._t_GenotypingProgram)

        __repr__ = __str__

    _M_omero.model.GenotypingProgramPrx = Ice.createTempClass()
    class GenotypingProgramPrx(_M_omero.model.SoftwareProgramPrx):

        def getSnpMarkersSet(self, _ctx=None):
            return _M_omero.model.GenotypingProgram._op_getSnpMarkersSet.invoke(self, ((), _ctx))

        def begin_getSnpMarkersSet(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.GenotypingProgram._op_getSnpMarkersSet.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getSnpMarkersSet(self, _r):
            return _M_omero.model.GenotypingProgram._op_getSnpMarkersSet.end(self, _r)

        def setSnpMarkersSet(self, theSnpMarkersSet, _ctx=None):
            return _M_omero.model.GenotypingProgram._op_setSnpMarkersSet.invoke(self, ((theSnpMarkersSet, ), _ctx))

        def begin_setSnpMarkersSet(self, theSnpMarkersSet, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.GenotypingProgram._op_setSnpMarkersSet.begin(self, ((theSnpMarkersSet, ), _response, _ex, _sent, _ctx))

        def end_setSnpMarkersSet(self, _r):
            return _M_omero.model.GenotypingProgram._op_setSnpMarkersSet.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.model.GenotypingProgramPrx.ice_checkedCast(proxy, '::omero::model::GenotypingProgram', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.model.GenotypingProgramPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_omero.model._t_GenotypingProgramPrx = IcePy.defineProxy('::omero::model::GenotypingProgram', GenotypingProgramPrx)

    _M_omero.model._t_GenotypingProgram = IcePy.declareClass('::omero::model::GenotypingProgram')

    _M_omero.model._t_GenotypingProgram = IcePy.defineClass('::omero::model::GenotypingProgram', GenotypingProgram, (), True, _M_omero.model._t_SoftwareProgram, (), (('_snpMarkersSet', (), _M_omero.model._t_SNPMarkersSet),))
    GenotypingProgram._ice_type = _M_omero.model._t_GenotypingProgram

    GenotypingProgram._op_getSnpMarkersSet = IcePy.Operation('getSnpMarkersSet', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero.model._t_SNPMarkersSet, ())
    GenotypingProgram._op_setSnpMarkersSet = IcePy.Operation('setSnpMarkersSet', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_SNPMarkersSet),), (), None, ())

    _M_omero.model.GenotypingProgram = GenotypingProgram
    del GenotypingProgram

    _M_omero.model.GenotypingProgramPrx = GenotypingProgramPrx
    del GenotypingProgramPrx

# End of module omero.model

__name__ = 'omero'

# End of module omero
