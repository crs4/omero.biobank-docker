"""
   /*
   **   Generated by blitz/templates/resouces/combined.vm
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
"""
import Ice
import IceImport
import omero
IceImport.load("omero_model_DetailsI")
IceImport.load("omero_model_PlateWell_ice")
from omero.rtypes import rlong
_omero = Ice.openModule("omero")
_omero_model = Ice.openModule("omero.model")
__name__ = "omero.model"
class PlateWellI(_omero_model.PlateWell):

      LABEL =  "ome.model.vl.PlateWell_label"
      SLOT =  "ome.model.vl.PlateWell_slot"
      CONTAINER =  "ome.model.vl.PlateWell_container"
      CONTAINERSLOTLABELUK =  "ome.model.vl.PlateWell_containerSlotLabelUK"
      CONTAINERSLOTINDEXUK =  "ome.model.vl.PlateWell_containerSlotIndexUK"
      VID =  "ome.model.vl.PlateWell_vid"
      ACTIVATIONDATE =  "ome.model.vl.PlateWell_activationDate"
      DESTRUCTIONDATE =  "ome.model.vl.PlateWell_destructionDate"
      CURRENTVOLUME =  "ome.model.vl.PlateWell_currentVolume"
      INITIALVOLUME =  "ome.model.vl.PlateWell_initialVolume"
      CONTENT =  "ome.model.vl.PlateWell_content"
      STATUS =  "ome.model.vl.PlateWell_status"
      ACTION =  "ome.model.vl.PlateWell_action"
      LASTUPDATE =  "ome.model.vl.PlateWell_lastUpdate"
      DETAILS =  "ome.model.vl.PlateWell_details"
      def errorIfUnloaded(self):
          if not self._loaded:
              raise _omero.UnloadedEntityException("Object unloaded:"+str(self))

      def throwNullCollectionException(self,propertyName):
          raise _omero.UnloadedEntityException(""+
          "Error updating collection:" + propertyName +"\n"+
          "Collection is currently null. This can be seen\n" +
          "by testing \""+ propertyName +"Loaded\". This implies\n"+
          "that this collection was unloaded. Please refresh this object\n"+
          "in order to update this collection.\n")

      def _toggleCollectionsLoaded(self,load):
          pass

      def __init__(self, id = None, loaded = True):
          super(PlateWellI, self).__init__()
          # Relying on omero.rtypes.rlong's error-handling
          self._id = rlong(id)
          self._loaded = loaded
          if self._loaded:
             self._details = _omero_model.DetailsI()
             self._toggleCollectionsLoaded(True)

      def unload(self, current = None):
          self._loaded = False
          self.unloadLabel( )
          self.unloadSlot( )
          self.unloadContainer( )
          self.unloadContainerSlotLabelUK( )
          self.unloadContainerSlotIndexUK( )
          self.unloadVid( )
          self.unloadActivationDate( )
          self.unloadDestructionDate( )
          self.unloadCurrentVolume( )
          self.unloadInitialVolume( )
          self.unloadContent( )
          self.unloadStatus( )
          self.unloadAction( )
          self.unloadLastUpdate( )
          self.unloadDetails( )

      def isLoaded(self, current = None):
          return self._loaded
      def unloadCollections(self, current = None):
          self._toggleCollectionsLoaded( False )
      def isGlobal(self, current = None):
          return  False ;
      def isMutable(self, current = None):
          return  True ;
      def isAnnotated(self, current = None):
          return  False ;
      def isLink(self, current = None):
          return  False ;
      def shallowCopy(self, current = None):
            if not self._loaded: return self.proxy()
            copy = PlateWellI()
            copy._id = self._id;
            copy._version = self._version;
            copy._details = None  # Unloading for the moment.
            raise omero.ClientError("NYI")
      def proxy(self, current = None):
          if self._id is None: raise omero.ClientError("Proxies require an id")
          return PlateWellI( self._id.getValue(), False )

      def getDetails(self, current = None):
          self.errorIfUnloaded()
          return self._details

      def unloadDetails(self, current = None):
          self._details = None

      def getId(self, current = None):
          return self._id

      def setId(self, _id, current = None):
          self._id = _id

      def checkUnloadedProperty(self, value, loadedField):
          if value == None:
              self.__dict__[loadedField] = False
          else:
              self.__dict__[loadedField] = True

      def getVersion(self, current = None):
          self.errorIfUnloaded()
          return self._version

      def setVersion(self, version, current = None):
          self.errorIfUnloaded()
          self._version = version

      def unloadLabel(self, ):
          self._labelLoaded = False
          self._label = None;

      def getLabel(self, current = None):
          self.errorIfUnloaded()
          return self._label

      def setLabel(self, _label, current = None):
          self.errorIfUnloaded()
          self._label = _label
          pass

      def unloadSlot(self, ):
          self._slotLoaded = False
          self._slot = None;

      def getSlot(self, current = None):
          self.errorIfUnloaded()
          return self._slot

      def setSlot(self, _slot, current = None):
          self.errorIfUnloaded()
          self._slot = _slot
          pass

      def unloadContainer(self, ):
          self._containerLoaded = False
          self._container = None;

      def getContainer(self, current = None):
          self.errorIfUnloaded()
          return self._container

      def setContainer(self, _container, current = None):
          self.errorIfUnloaded()
          self._container = _container
          pass

      def unloadContainerSlotLabelUK(self, ):
          self._containerSlotLabelUKLoaded = False
          self._containerSlotLabelUK = None;

      def getContainerSlotLabelUK(self, current = None):
          self.errorIfUnloaded()
          return self._containerSlotLabelUK

      def setContainerSlotLabelUK(self, _containerSlotLabelUK, current = None):
          self.errorIfUnloaded()
          self._containerSlotLabelUK = _containerSlotLabelUK
          pass

      def unloadContainerSlotIndexUK(self, ):
          self._containerSlotIndexUKLoaded = False
          self._containerSlotIndexUK = None;

      def getContainerSlotIndexUK(self, current = None):
          self.errorIfUnloaded()
          return self._containerSlotIndexUK

      def setContainerSlotIndexUK(self, _containerSlotIndexUK, current = None):
          self.errorIfUnloaded()
          self._containerSlotIndexUK = _containerSlotIndexUK
          pass

      def unloadVid(self, ):
          self._vidLoaded = False
          self._vid = None;

      def getVid(self, current = None):
          self.errorIfUnloaded()
          return self._vid

      def setVid(self, _vid, current = None):
          self.errorIfUnloaded()
          self._vid = _vid
          pass

      def unloadActivationDate(self, ):
          self._activationDateLoaded = False
          self._activationDate = None;

      def getActivationDate(self, current = None):
          self.errorIfUnloaded()
          return self._activationDate

      def setActivationDate(self, _activationDate, current = None):
          self.errorIfUnloaded()
          self._activationDate = _activationDate
          pass

      def unloadDestructionDate(self, ):
          self._destructionDateLoaded = False
          self._destructionDate = None;

      def getDestructionDate(self, current = None):
          self.errorIfUnloaded()
          return self._destructionDate

      def setDestructionDate(self, _destructionDate, current = None):
          self.errorIfUnloaded()
          self._destructionDate = _destructionDate
          pass

      def unloadCurrentVolume(self, ):
          self._currentVolumeLoaded = False
          self._currentVolume = None;

      def getCurrentVolume(self, current = None):
          self.errorIfUnloaded()
          return self._currentVolume

      def setCurrentVolume(self, _currentVolume, current = None):
          self.errorIfUnloaded()
          self._currentVolume = _currentVolume
          pass

      def unloadInitialVolume(self, ):
          self._initialVolumeLoaded = False
          self._initialVolume = None;

      def getInitialVolume(self, current = None):
          self.errorIfUnloaded()
          return self._initialVolume

      def setInitialVolume(self, _initialVolume, current = None):
          self.errorIfUnloaded()
          self._initialVolume = _initialVolume
          pass

      def unloadContent(self, ):
          self._contentLoaded = False
          self._content = None;

      def getContent(self, current = None):
          self.errorIfUnloaded()
          return self._content

      def setContent(self, _content, current = None):
          self.errorIfUnloaded()
          self._content = _content
          pass

      def unloadStatus(self, ):
          self._statusLoaded = False
          self._status = None;

      def getStatus(self, current = None):
          self.errorIfUnloaded()
          return self._status

      def setStatus(self, _status, current = None):
          self.errorIfUnloaded()
          self._status = _status
          pass

      def unloadAction(self, ):
          self._actionLoaded = False
          self._action = None;

      def getAction(self, current = None):
          self.errorIfUnloaded()
          return self._action

      def setAction(self, _action, current = None):
          self.errorIfUnloaded()
          self._action = _action
          pass

      def unloadLastUpdate(self, ):
          self._lastUpdateLoaded = False
          self._lastUpdate = None;

      def getLastUpdate(self, current = None):
          self.errorIfUnloaded()
          return self._lastUpdate

      def setLastUpdate(self, _lastUpdate, current = None):
          self.errorIfUnloaded()
          self._lastUpdate = _lastUpdate
          pass


      def ice_postUnmarshal(self):
          """
          Provides additional initialization once all data loaded
          """
          pass # Currently unused


      def ice_preMarshal(self):
          """
          Provides additional validation before data is sent
          """
          pass # Currently unused

      def __getattr__(self, name):
          import __builtin__
          """
          Reroutes all access to object.field through object.getField() or object.isField()
          """
          field  = "_" + name
          capitalized = name[0].capitalize() + name[1:]
          getter = "get" + capitalized
          questn = "is" + capitalized
          try:
              self.__dict__[field]
              if hasattr(self, getter):
                  method = getattr(self, getter)
                  return method()
              elif hasattr(self, questn):
                  method = getattr(self, questn)
                  return method()
          except:
              pass
          raise AttributeError("'%s' object has no attribute '%s' or '%s'" % (self.__class__.__name__, getter, questn))

      def __setattr__(self, name, value):
          """
          Reroutes all access to object.field through object.getField(), with the caveat
          that all sets on variables starting with "_" are permitted directly.
          """
          if name.startswith("_"):
              self.__dict__[name] = value
              return
          else:
              field  = "_" + name
              setter = "set" + name[0].capitalize() + name[1:]
              if hasattr(self, field) and hasattr(self, setter):
                  method = getattr(self, setter)
                  return method(value)
          raise AttributeError("'%s' object has no attribute '%s'" % (self.__class__.__name__, setter))

_omero_model.PlateWellI = PlateWellI
