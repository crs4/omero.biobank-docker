# **********************************************************************
#
# Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.4.2
#
# <auto-generated>
#
# Generated from file `AffymetrixArray.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy, __builtin__
import omero_model_IObject_ice
import omero_RTypes_ice
import omero_System_ice
import omero_Collections_ice
import omero_model_Tube_ice

# Included module omero
_M_omero = Ice.openModule('omero')

# Included module omero.model
_M_omero.model = Ice.openModule('omero.model')

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module omero.sys
_M_omero.sys = Ice.openModule('omero.sys')

# Included module omero.api
_M_omero.api = Ice.openModule('omero.api')

# Start of module omero
__name__ = 'omero'

# Start of module omero.model
__name__ = 'omero.model'

if not _M_omero.model.__dict__.has_key('AffymetrixAssayType'):
    _M_omero.model._t_AffymetrixAssayType = IcePy.declareClass('::omero::model::AffymetrixAssayType')
    _M_omero.model._t_AffymetrixAssayTypePrx = IcePy.declareProxy('::omero::model::AffymetrixAssayType')

if not _M_omero.model.__dict__.has_key('VesselContent'):
    _M_omero.model._t_VesselContent = IcePy.declareClass('::omero::model::VesselContent')
    _M_omero.model._t_VesselContentPrx = IcePy.declareProxy('::omero::model::VesselContent')

if not _M_omero.model.__dict__.has_key('VesselStatus'):
    _M_omero.model._t_VesselStatus = IcePy.declareClass('::omero::model::VesselStatus')
    _M_omero.model._t_VesselStatusPrx = IcePy.declareProxy('::omero::model::VesselStatus')

if not _M_omero.model.__dict__.has_key('Action'):
    _M_omero.model._t_Action = IcePy.declareClass('::omero::model::Action')
    _M_omero.model._t_ActionPrx = IcePy.declareProxy('::omero::model::Action')

if not _M_omero.model.__dict__.has_key('Details'):
    _M_omero.model._t_Details = IcePy.declareClass('::omero::model::Details')
    _M_omero.model._t_DetailsPrx = IcePy.declareProxy('::omero::model::Details')

if not _M_omero.model.__dict__.has_key('AffymetrixArray'):
    _M_omero.model.AffymetrixArray = Ice.createTempClass()
    class AffymetrixArray(_M_omero.model.Tube):
        def __init__(self, _id=None, _details=None, _loaded=False, _version=None, _vid=None, _activationDate=None, _destructionDate=None, _currentVolume=None, _initialVolume=None, _content=None, _status=None, _action=None, _lastUpdate=None, _label=None, _barcode=None, _assayType=None):
            if __builtin__.type(self) == _M_omero.model.AffymetrixArray:
                raise RuntimeError('omero.model.AffymetrixArray is an abstract class')
            _M_omero.model.Tube.__init__(self, _id, _details, _loaded, _version, _vid, _activationDate, _destructionDate, _currentVolume, _initialVolume, _content, _status, _action, _lastUpdate, _label, _barcode)
            self._assayType = _assayType

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::model::AffymetrixArray', '::omero::model::IObject', '::omero::model::Tube', '::omero::model::Vessel')

        def ice_id(self, current=None):
            return '::omero::model::AffymetrixArray'

        def ice_staticId():
            return '::omero::model::AffymetrixArray'
        ice_staticId = staticmethod(ice_staticId)

        def getAssayType(self, current=None):
            pass

        def setAssayType(self, theAssayType, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_omero.model._t_AffymetrixArray)

        __repr__ = __str__

    _M_omero.model.AffymetrixArrayPrx = Ice.createTempClass()
    class AffymetrixArrayPrx(_M_omero.model.TubePrx):

        def getAssayType(self, _ctx=None):
            return _M_omero.model.AffymetrixArray._op_getAssayType.invoke(self, ((), _ctx))

        def begin_getAssayType(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.AffymetrixArray._op_getAssayType.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getAssayType(self, _r):
            return _M_omero.model.AffymetrixArray._op_getAssayType.end(self, _r)

        def setAssayType(self, theAssayType, _ctx=None):
            return _M_omero.model.AffymetrixArray._op_setAssayType.invoke(self, ((theAssayType, ), _ctx))

        def begin_setAssayType(self, theAssayType, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.AffymetrixArray._op_setAssayType.begin(self, ((theAssayType, ), _response, _ex, _sent, _ctx))

        def end_setAssayType(self, _r):
            return _M_omero.model.AffymetrixArray._op_setAssayType.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.model.AffymetrixArrayPrx.ice_checkedCast(proxy, '::omero::model::AffymetrixArray', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.model.AffymetrixArrayPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_omero.model._t_AffymetrixArrayPrx = IcePy.defineProxy('::omero::model::AffymetrixArray', AffymetrixArrayPrx)

    _M_omero.model._t_AffymetrixArray = IcePy.declareClass('::omero::model::AffymetrixArray')

    _M_omero.model._t_AffymetrixArray = IcePy.defineClass('::omero::model::AffymetrixArray', AffymetrixArray, (), True, _M_omero.model._t_Tube, (), (('_assayType', (), _M_omero.model._t_AffymetrixAssayType),))
    AffymetrixArray._ice_type = _M_omero.model._t_AffymetrixArray

    AffymetrixArray._op_getAssayType = IcePy.Operation('getAssayType', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero.model._t_AffymetrixAssayType, ())
    AffymetrixArray._op_setAssayType = IcePy.Operation('setAssayType', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_AffymetrixAssayType),), (), None, ())

    _M_omero.model.AffymetrixArray = AffymetrixArray
    del AffymetrixArray

    _M_omero.model.AffymetrixArrayPrx = AffymetrixArrayPrx
    del AffymetrixArrayPrx

# End of module omero.model

__name__ = 'omero'

# End of module omero
