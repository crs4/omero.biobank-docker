"""
   /*
   **   Generated by blitz/templates/resouces/combined.vm
   **
   **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
   **   Use is subject to license terms supplied in LICENSE.txt
   **
   */
"""
import Ice
import IceImport
import omero
IceImport.load("omero_model_DetailsI")
IceImport.load("omero_model_City_ice")
from omero.rtypes import rlong
_omero = Ice.openModule("omero")
_omero_model = Ice.openModule("omero.model")
__name__ = "omero.model"
class CityI(_omero_model.City):

      ZIPCODE =  "ome.model.vl.City_zipCode"
      LANDREGISTERCODE =  "ome.model.vl.City_landRegisterCode"
      USLCODE =  "ome.model.vl.City_uslCode"
      REGION =  "ome.model.vl.City_region"
      DISTRICTLABEL =  "ome.model.vl.City_districtLabel"
      VID =  "ome.model.vl.City_vid"
      NAME =  "ome.model.vl.City_name"
      ISTATCODE =  "ome.model.vl.City_istatCode"
      LASTUPDATE =  "ome.model.vl.City_lastUpdate"
      CEASEDATE =  "ome.model.vl.City_ceaseDate"
      DETAILS =  "ome.model.vl.City_details"
      def errorIfUnloaded(self):
          if not self._loaded:
              raise _omero.UnloadedEntityException("Object unloaded:"+str(self))

      def throwNullCollectionException(self,propertyName):
          raise _omero.UnloadedEntityException(""+
          "Error updating collection:" + propertyName +"\n"+
          "Collection is currently null. This can be seen\n" +
          "by testing \""+ propertyName +"Loaded\". This implies\n"+
          "that this collection was unloaded. Please refresh this object\n"+
          "in order to update this collection.\n")

      def _toggleCollectionsLoaded(self,load):
          pass

      def __init__(self, id = None, loaded = True):
          super(CityI, self).__init__()
          # Relying on omero.rtypes.rlong's error-handling
          self._id = rlong(id)
          self._loaded = loaded
          if self._loaded:
             self._details = _omero_model.DetailsI()
             self._toggleCollectionsLoaded(True)

      def unload(self, current = None):
          self._loaded = False
          self.unloadZipCode( )
          self.unloadLandRegisterCode( )
          self.unloadUslCode( )
          self.unloadRegion( )
          self.unloadDistrictLabel( )
          self.unloadVid( )
          self.unloadName( )
          self.unloadIstatCode( )
          self.unloadLastUpdate( )
          self.unloadCeaseDate( )
          self.unloadDetails( )

      def isLoaded(self, current = None):
          return self._loaded
      def unloadCollections(self, current = None):
          self._toggleCollectionsLoaded( False )
      def isGlobal(self, current = None):
          return  False ;
      def isMutable(self, current = None):
          return  True ;
      def isAnnotated(self, current = None):
          return  False ;
      def isLink(self, current = None):
          return  False ;
      def shallowCopy(self, current = None):
            if not self._loaded: return self.proxy()
            copy = CityI()
            copy._id = self._id;
            copy._version = self._version;
            copy._details = None  # Unloading for the moment.
            raise omero.ClientError("NYI")
      def proxy(self, current = None):
          if self._id is None: raise omero.ClientError("Proxies require an id")
          return CityI( self._id.getValue(), False )

      def getDetails(self, current = None):
          self.errorIfUnloaded()
          return self._details

      def unloadDetails(self, current = None):
          self._details = None

      def getId(self, current = None):
          return self._id

      def setId(self, _id, current = None):
          self._id = _id

      def checkUnloadedProperty(self, value, loadedField):
          if value == None:
              self.__dict__[loadedField] = False
          else:
              self.__dict__[loadedField] = True

      def getVersion(self, current = None):
          self.errorIfUnloaded()
          return self._version

      def setVersion(self, version, current = None):
          self.errorIfUnloaded()
          self._version = version

      def unloadZipCode(self, ):
          self._zipCodeLoaded = False
          self._zipCode = None;

      def getZipCode(self, current = None):
          self.errorIfUnloaded()
          return self._zipCode

      def setZipCode(self, _zipCode, current = None):
          self.errorIfUnloaded()
          self._zipCode = _zipCode
          pass

      def unloadLandRegisterCode(self, ):
          self._landRegisterCodeLoaded = False
          self._landRegisterCode = None;

      def getLandRegisterCode(self, current = None):
          self.errorIfUnloaded()
          return self._landRegisterCode

      def setLandRegisterCode(self, _landRegisterCode, current = None):
          self.errorIfUnloaded()
          self._landRegisterCode = _landRegisterCode
          pass

      def unloadUslCode(self, ):
          self._uslCodeLoaded = False
          self._uslCode = None;

      def getUslCode(self, current = None):
          self.errorIfUnloaded()
          return self._uslCode

      def setUslCode(self, _uslCode, current = None):
          self.errorIfUnloaded()
          self._uslCode = _uslCode
          pass

      def unloadRegion(self, ):
          self._regionLoaded = False
          self._region = None;

      def getRegion(self, current = None):
          self.errorIfUnloaded()
          return self._region

      def setRegion(self, _region, current = None):
          self.errorIfUnloaded()
          self._region = _region
          pass

      def unloadDistrictLabel(self, ):
          self._districtLabelLoaded = False
          self._districtLabel = None;

      def getDistrictLabel(self, current = None):
          self.errorIfUnloaded()
          return self._districtLabel

      def setDistrictLabel(self, _districtLabel, current = None):
          self.errorIfUnloaded()
          self._districtLabel = _districtLabel
          pass

      def unloadVid(self, ):
          self._vidLoaded = False
          self._vid = None;

      def getVid(self, current = None):
          self.errorIfUnloaded()
          return self._vid

      def setVid(self, _vid, current = None):
          self.errorIfUnloaded()
          self._vid = _vid
          pass

      def unloadName(self, ):
          self._nameLoaded = False
          self._name = None;

      def getName(self, current = None):
          self.errorIfUnloaded()
          return self._name

      def setName(self, _name, current = None):
          self.errorIfUnloaded()
          self._name = _name
          pass

      def unloadIstatCode(self, ):
          self._istatCodeLoaded = False
          self._istatCode = None;

      def getIstatCode(self, current = None):
          self.errorIfUnloaded()
          return self._istatCode

      def setIstatCode(self, _istatCode, current = None):
          self.errorIfUnloaded()
          self._istatCode = _istatCode
          pass

      def unloadLastUpdate(self, ):
          self._lastUpdateLoaded = False
          self._lastUpdate = None;

      def getLastUpdate(self, current = None):
          self.errorIfUnloaded()
          return self._lastUpdate

      def setLastUpdate(self, _lastUpdate, current = None):
          self.errorIfUnloaded()
          self._lastUpdate = _lastUpdate
          pass

      def unloadCeaseDate(self, ):
          self._ceaseDateLoaded = False
          self._ceaseDate = None;

      def getCeaseDate(self, current = None):
          self.errorIfUnloaded()
          return self._ceaseDate

      def setCeaseDate(self, _ceaseDate, current = None):
          self.errorIfUnloaded()
          self._ceaseDate = _ceaseDate
          pass


      def ice_postUnmarshal(self):
          """
          Provides additional initialization once all data loaded
          """
          pass # Currently unused


      def ice_preMarshal(self):
          """
          Provides additional validation before data is sent
          """
          pass # Currently unused

      def __getattr__(self, name):
          import __builtin__
          """
          Reroutes all access to object.field through object.getField() or object.isField()
          """
          field  = "_" + name
          capitalized = name[0].capitalize() + name[1:]
          getter = "get" + capitalized
          questn = "is" + capitalized
          try:
              self.__dict__[field]
              if hasattr(self, getter):
                  method = getattr(self, getter)
                  return method()
              elif hasattr(self, questn):
                  method = getattr(self, questn)
                  return method()
          except:
              pass
          raise AttributeError("'%s' object has no attribute '%s' or '%s'" % (self.__class__.__name__, getter, questn))

      def __setattr__(self, name, value):
          """
          Reroutes all access to object.field through object.getField(), with the caveat
          that all sets on variables starting with "_" are permitted directly.
          """
          if name.startswith("_"):
              self.__dict__[name] = value
              return
          else:
              field  = "_" + name
              setter = "set" + name[0].capitalize() + name[1:]
              if hasattr(self, field) and hasattr(self, setter):
                  method = getattr(self, setter)
                  return method(value)
          raise AttributeError("'%s' object has no attribute '%s'" % (self.__class__.__name__, setter))

_omero_model.CityI = CityI
