# **********************************************************************
#
# Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.4.2
#
# <auto-generated>
#
# Generated from file `AffymetrixCel.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy, __builtin__
import omero_model_IObject_ice
import omero_RTypes_ice
import omero_System_ice
import omero_Collections_ice
import omero_model_MicroArrayMeasure_ice

# Included module omero
_M_omero = Ice.openModule('omero')

# Included module omero.model
_M_omero.model = Ice.openModule('omero.model')

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module omero.sys
_M_omero.sys = Ice.openModule('omero.sys')

# Included module omero.api
_M_omero.api = Ice.openModule('omero.api')

# Start of module omero
__name__ = 'omero'

# Start of module omero.model
__name__ = 'omero.model'

if not _M_omero.model.__dict__.has_key('AffymetrixCelArrayType'):
    _M_omero.model._t_AffymetrixCelArrayType = IcePy.declareClass('::omero::model::AffymetrixCelArrayType')
    _M_omero.model._t_AffymetrixCelArrayTypePrx = IcePy.declareProxy('::omero::model::AffymetrixCelArrayType')

if not _M_omero.model.__dict__.has_key('DataSampleStatus'):
    _M_omero.model._t_DataSampleStatus = IcePy.declareClass('::omero::model::DataSampleStatus')
    _M_omero.model._t_DataSampleStatusPrx = IcePy.declareProxy('::omero::model::DataSampleStatus')

if not _M_omero.model.__dict__.has_key('Action'):
    _M_omero.model._t_Action = IcePy.declareClass('::omero::model::Action')
    _M_omero.model._t_ActionPrx = IcePy.declareProxy('::omero::model::Action')

if not _M_omero.model.__dict__.has_key('Details'):
    _M_omero.model._t_Details = IcePy.declareClass('::omero::model::Details')
    _M_omero.model._t_DetailsPrx = IcePy.declareProxy('::omero::model::Details')

if not _M_omero.model.__dict__.has_key('AffymetrixCel'):
    _M_omero.model.AffymetrixCel = Ice.createTempClass()
    class AffymetrixCel(_M_omero.model.MicroArrayMeasure):
        def __init__(self, _id=None, _details=None, _loaded=False, _version=None, _vid=None, _label=None, _creationDate=None, _status=None, _action=None, _arrayType=None, _celID=None):
            if __builtin__.type(self) == _M_omero.model.AffymetrixCel:
                raise RuntimeError('omero.model.AffymetrixCel is an abstract class')
            _M_omero.model.MicroArrayMeasure.__init__(self, _id, _details, _loaded, _version, _vid, _label, _creationDate, _status, _action)
            self._arrayType = _arrayType
            self._celID = _celID

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::model::AffymetrixCel', '::omero::model::DataSample', '::omero::model::IObject', '::omero::model::MicroArrayMeasure')

        def ice_id(self, current=None):
            return '::omero::model::AffymetrixCel'

        def ice_staticId():
            return '::omero::model::AffymetrixCel'
        ice_staticId = staticmethod(ice_staticId)

        def getArrayType(self, current=None):
            pass

        def setArrayType(self, theArrayType, current=None):
            pass

        def getCelID(self, current=None):
            pass

        def setCelID(self, theCelID, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_omero.model._t_AffymetrixCel)

        __repr__ = __str__

    _M_omero.model.AffymetrixCelPrx = Ice.createTempClass()
    class AffymetrixCelPrx(_M_omero.model.MicroArrayMeasurePrx):

        def getArrayType(self, _ctx=None):
            return _M_omero.model.AffymetrixCel._op_getArrayType.invoke(self, ((), _ctx))

        def begin_getArrayType(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.AffymetrixCel._op_getArrayType.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getArrayType(self, _r):
            return _M_omero.model.AffymetrixCel._op_getArrayType.end(self, _r)

        def setArrayType(self, theArrayType, _ctx=None):
            return _M_omero.model.AffymetrixCel._op_setArrayType.invoke(self, ((theArrayType, ), _ctx))

        def begin_setArrayType(self, theArrayType, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.AffymetrixCel._op_setArrayType.begin(self, ((theArrayType, ), _response, _ex, _sent, _ctx))

        def end_setArrayType(self, _r):
            return _M_omero.model.AffymetrixCel._op_setArrayType.end(self, _r)

        def getCelID(self, _ctx=None):
            return _M_omero.model.AffymetrixCel._op_getCelID.invoke(self, ((), _ctx))

        def begin_getCelID(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.AffymetrixCel._op_getCelID.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getCelID(self, _r):
            return _M_omero.model.AffymetrixCel._op_getCelID.end(self, _r)

        def setCelID(self, theCelID, _ctx=None):
            return _M_omero.model.AffymetrixCel._op_setCelID.invoke(self, ((theCelID, ), _ctx))

        def begin_setCelID(self, theCelID, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.AffymetrixCel._op_setCelID.begin(self, ((theCelID, ), _response, _ex, _sent, _ctx))

        def end_setCelID(self, _r):
            return _M_omero.model.AffymetrixCel._op_setCelID.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.model.AffymetrixCelPrx.ice_checkedCast(proxy, '::omero::model::AffymetrixCel', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.model.AffymetrixCelPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_omero.model._t_AffymetrixCelPrx = IcePy.defineProxy('::omero::model::AffymetrixCel', AffymetrixCelPrx)

    _M_omero.model._t_AffymetrixCel = IcePy.declareClass('::omero::model::AffymetrixCel')

    _M_omero.model._t_AffymetrixCel = IcePy.defineClass('::omero::model::AffymetrixCel', AffymetrixCel, (), True, _M_omero.model._t_MicroArrayMeasure, (), (
        ('_arrayType', (), _M_omero.model._t_AffymetrixCelArrayType),
        ('_celID', (), _M_omero._t_RString)
    ))
    AffymetrixCel._ice_type = _M_omero.model._t_AffymetrixCel

    AffymetrixCel._op_getArrayType = IcePy.Operation('getArrayType', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero.model._t_AffymetrixCelArrayType, ())
    AffymetrixCel._op_setArrayType = IcePy.Operation('setArrayType', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_AffymetrixCelArrayType),), (), None, ())
    AffymetrixCel._op_getCelID = IcePy.Operation('getCelID', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RString, ())
    AffymetrixCel._op_setCelID = IcePy.Operation('setCelID', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RString),), (), None, ())

    _M_omero.model.AffymetrixCel = AffymetrixCel
    del AffymetrixCel

    _M_omero.model.AffymetrixCelPrx = AffymetrixCelPrx
    del AffymetrixCelPrx

# End of module omero.model

__name__ = 'omero'

# End of module omero
