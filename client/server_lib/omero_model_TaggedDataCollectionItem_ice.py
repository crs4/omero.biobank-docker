# **********************************************************************
#
# Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.4.2
#
# <auto-generated>
#
# Generated from file `TaggedDataCollectionItem.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy, __builtin__
import omero_model_IObject_ice
import omero_RTypes_ice
import omero_System_ice
import omero_Collections_ice
import omero_model_DataCollectionItem_ice

# Included module omero
_M_omero = Ice.openModule('omero')

# Included module omero.model
_M_omero.model = Ice.openModule('omero.model')

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module omero.sys
_M_omero.sys = Ice.openModule('omero.sys')

# Included module omero.api
_M_omero.api = Ice.openModule('omero.api')

# Start of module omero
__name__ = 'omero'

# Start of module omero.model
__name__ = 'omero.model'

if not _M_omero.model.__dict__.has_key('DataSample'):
    _M_omero.model._t_DataSample = IcePy.declareClass('::omero::model::DataSample')
    _M_omero.model._t_DataSamplePrx = IcePy.declareProxy('::omero::model::DataSample')

if not _M_omero.model.__dict__.has_key('DataCollection'):
    _M_omero.model._t_DataCollection = IcePy.declareClass('::omero::model::DataCollection')
    _M_omero.model._t_DataCollectionPrx = IcePy.declareProxy('::omero::model::DataCollection')

if not _M_omero.model.__dict__.has_key('Details'):
    _M_omero.model._t_Details = IcePy.declareClass('::omero::model::Details')
    _M_omero.model._t_DetailsPrx = IcePy.declareProxy('::omero::model::Details')

if not _M_omero.model.__dict__.has_key('TaggedDataCollectionItem'):
    _M_omero.model.TaggedDataCollectionItem = Ice.createTempClass()
    class TaggedDataCollectionItem(_M_omero.model.DataCollectionItem):
        def __init__(self, _id=None, _details=None, _loaded=False, _version=None, _vid=None, _dataSample=None, _dataCollection=None, _dataCollectionItemUK=None, _role=None):
            if __builtin__.type(self) == _M_omero.model.TaggedDataCollectionItem:
                raise RuntimeError('omero.model.TaggedDataCollectionItem is an abstract class')
            _M_omero.model.DataCollectionItem.__init__(self, _id, _details, _loaded, _version, _vid, _dataSample, _dataCollection, _dataCollectionItemUK)
            self._role = _role

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::model::DataCollectionItem', '::omero::model::IObject', '::omero::model::TaggedDataCollectionItem')

        def ice_id(self, current=None):
            return '::omero::model::TaggedDataCollectionItem'

        def ice_staticId():
            return '::omero::model::TaggedDataCollectionItem'
        ice_staticId = staticmethod(ice_staticId)

        def getRole(self, current=None):
            pass

        def setRole(self, theRole, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_omero.model._t_TaggedDataCollectionItem)

        __repr__ = __str__

    _M_omero.model.TaggedDataCollectionItemPrx = Ice.createTempClass()
    class TaggedDataCollectionItemPrx(_M_omero.model.DataCollectionItemPrx):

        def getRole(self, _ctx=None):
            return _M_omero.model.TaggedDataCollectionItem._op_getRole.invoke(self, ((), _ctx))

        def begin_getRole(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.TaggedDataCollectionItem._op_getRole.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getRole(self, _r):
            return _M_omero.model.TaggedDataCollectionItem._op_getRole.end(self, _r)

        def setRole(self, theRole, _ctx=None):
            return _M_omero.model.TaggedDataCollectionItem._op_setRole.invoke(self, ((theRole, ), _ctx))

        def begin_setRole(self, theRole, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.TaggedDataCollectionItem._op_setRole.begin(self, ((theRole, ), _response, _ex, _sent, _ctx))

        def end_setRole(self, _r):
            return _M_omero.model.TaggedDataCollectionItem._op_setRole.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.model.TaggedDataCollectionItemPrx.ice_checkedCast(proxy, '::omero::model::TaggedDataCollectionItem', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.model.TaggedDataCollectionItemPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_omero.model._t_TaggedDataCollectionItemPrx = IcePy.defineProxy('::omero::model::TaggedDataCollectionItem', TaggedDataCollectionItemPrx)

    _M_omero.model._t_TaggedDataCollectionItem = IcePy.declareClass('::omero::model::TaggedDataCollectionItem')

    _M_omero.model._t_TaggedDataCollectionItem = IcePy.defineClass('::omero::model::TaggedDataCollectionItem', TaggedDataCollectionItem, (), True, _M_omero.model._t_DataCollectionItem, (), (('_role', (), _M_omero._t_RString),))
    TaggedDataCollectionItem._ice_type = _M_omero.model._t_TaggedDataCollectionItem

    TaggedDataCollectionItem._op_getRole = IcePy.Operation('getRole', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RString, ())
    TaggedDataCollectionItem._op_setRole = IcePy.Operation('setRole', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RString),), (), None, ())

    _M_omero.model.TaggedDataCollectionItem = TaggedDataCollectionItem
    del TaggedDataCollectionItem

    _M_omero.model.TaggedDataCollectionItemPrx = TaggedDataCollectionItemPrx
    del TaggedDataCollectionItemPrx

# End of module omero.model

__name__ = 'omero'

# End of module omero
