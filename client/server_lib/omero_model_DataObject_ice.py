# **********************************************************************
#
# Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.4.2
#
# <auto-generated>
#
# Generated from file `DataObject.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy, __builtin__
import omero_model_IObject_ice
import omero_RTypes_ice
import omero_System_ice
import omero_Collections_ice
import omero_model_OriginalFile_ice

# Included module omero
_M_omero = Ice.openModule('omero')

# Included module omero.model
_M_omero.model = Ice.openModule('omero.model')

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module omero.sys
_M_omero.sys = Ice.openModule('omero.sys')

# Included module omero.api
_M_omero.api = Ice.openModule('omero.api')

# Start of module omero
__name__ = 'omero'

# Start of module omero.model
__name__ = 'omero.model'

if not _M_omero.model.__dict__.has_key('DataSample'):
    _M_omero.model._t_DataSample = IcePy.declareClass('::omero::model::DataSample')
    _M_omero.model._t_DataSamplePrx = IcePy.declareProxy('::omero::model::DataSample')

if not _M_omero.model.__dict__.has_key('PixelsOriginalFileMap'):
    _M_omero.model._t_PixelsOriginalFileMap = IcePy.declareClass('::omero::model::PixelsOriginalFileMap')
    _M_omero.model._t_PixelsOriginalFileMapPrx = IcePy.declareProxy('::omero::model::PixelsOriginalFileMap')

if not _M_omero.model.__dict__.has_key('Pixels'):
    _M_omero.model._t_Pixels = IcePy.declareClass('::omero::model::Pixels')
    _M_omero.model._t_PixelsPrx = IcePy.declareProxy('::omero::model::Pixels')

if not _M_omero.model.__dict__.has_key('OriginalFileAnnotationLink'):
    _M_omero.model._t_OriginalFileAnnotationLink = IcePy.declareClass('::omero::model::OriginalFileAnnotationLink')
    _M_omero.model._t_OriginalFileAnnotationLinkPrx = IcePy.declareProxy('::omero::model::OriginalFileAnnotationLink')

if not _M_omero.model.__dict__.has_key('Annotation'):
    _M_omero.model._t_Annotation = IcePy.declareClass('::omero::model::Annotation')
    _M_omero.model._t_AnnotationPrx = IcePy.declareProxy('::omero::model::Annotation')

if not _M_omero.model.__dict__.has_key('Details'):
    _M_omero.model._t_Details = IcePy.declareClass('::omero::model::Details')
    _M_omero.model._t_DetailsPrx = IcePy.declareProxy('::omero::model::Details')

if not _M_omero.model.__dict__.has_key('DataObject'):
    _M_omero.model.DataObject = Ice.createTempClass()
    class DataObject(_M_omero.model.OriginalFile):
        def __init__(self, _id=None, _details=None, _loaded=False, _version=None, _pixelsFileMapsSeq=None, _pixelsFileMapsLoaded=False, _pixelsFileMapsCountPerOwner=None, _path=None, _size=None, _atime=None, _mtime=None, _ctime=None, _sha1=None, _mimetype=None, _annotationLinksSeq=None, _annotationLinksLoaded=False, _annotationLinksCountPerOwner=None, _name=None, _sample=None):
            if __builtin__.type(self) == _M_omero.model.DataObject:
                raise RuntimeError('omero.model.DataObject is an abstract class')
            _M_omero.model.OriginalFile.__init__(self, _id, _details, _loaded, _version, _pixelsFileMapsSeq, _pixelsFileMapsLoaded, _pixelsFileMapsCountPerOwner, _path, _size, _atime, _mtime, _ctime, _sha1, _mimetype, _annotationLinksSeq, _annotationLinksLoaded, _annotationLinksCountPerOwner, _name)
            self._sample = _sample

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::model::DataObject', '::omero::model::IObject', '::omero::model::OriginalFile')

        def ice_id(self, current=None):
            return '::omero::model::DataObject'

        def ice_staticId():
            return '::omero::model::DataObject'
        ice_staticId = staticmethod(ice_staticId)

        def getSample(self, current=None):
            pass

        def setSample(self, theSample, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_omero.model._t_DataObject)

        __repr__ = __str__

    _M_omero.model.DataObjectPrx = Ice.createTempClass()
    class DataObjectPrx(_M_omero.model.OriginalFilePrx):

        def getSample(self, _ctx=None):
            return _M_omero.model.DataObject._op_getSample.invoke(self, ((), _ctx))

        def begin_getSample(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.DataObject._op_getSample.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getSample(self, _r):
            return _M_omero.model.DataObject._op_getSample.end(self, _r)

        def setSample(self, theSample, _ctx=None):
            return _M_omero.model.DataObject._op_setSample.invoke(self, ((theSample, ), _ctx))

        def begin_setSample(self, theSample, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.DataObject._op_setSample.begin(self, ((theSample, ), _response, _ex, _sent, _ctx))

        def end_setSample(self, _r):
            return _M_omero.model.DataObject._op_setSample.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.model.DataObjectPrx.ice_checkedCast(proxy, '::omero::model::DataObject', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.model.DataObjectPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_omero.model._t_DataObjectPrx = IcePy.defineProxy('::omero::model::DataObject', DataObjectPrx)

    _M_omero.model._t_DataObject = IcePy.declareClass('::omero::model::DataObject')

    _M_omero.model._t_DataObject = IcePy.defineClass('::omero::model::DataObject', DataObject, (), True, _M_omero.model._t_OriginalFile, (), (('_sample', (), _M_omero.model._t_DataSample),))
    DataObject._ice_type = _M_omero.model._t_DataObject

    DataObject._op_getSample = IcePy.Operation('getSample', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero.model._t_DataSample, ())
    DataObject._op_setSample = IcePy.Operation('setSample', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_DataSample),), (), None, ())

    _M_omero.model.DataObject = DataObject
    del DataObject

    _M_omero.model.DataObjectPrx = DataObjectPrx
    del DataObjectPrx

# End of module omero.model

__name__ = 'omero'

# End of module omero
