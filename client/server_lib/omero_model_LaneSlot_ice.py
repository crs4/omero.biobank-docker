# **********************************************************************
#
# Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.4.2
#
# <auto-generated>
#
# Generated from file `LaneSlot.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy, __builtin__
import omero_model_IObject_ice
import omero_RTypes_ice
import omero_System_ice
import omero_Collections_ice

# Included module omero
_M_omero = Ice.openModule('omero')

# Included module omero.model
_M_omero.model = Ice.openModule('omero.model')

# Included module Ice
_M_Ice = Ice.openModule('Ice')

# Included module omero.sys
_M_omero.sys = Ice.openModule('omero.sys')

# Included module omero.api
_M_omero.api = Ice.openModule('omero.api')

# Start of module omero
__name__ = 'omero'

# Start of module omero.model
__name__ = 'omero.model'

if not _M_omero.model.__dict__.has_key('Lane'):
    _M_omero.model._t_Lane = IcePy.declareClass('::omero::model::Lane')
    _M_omero.model._t_LanePrx = IcePy.declareProxy('::omero::model::Lane')

if not _M_omero.model.__dict__.has_key('VesselContent'):
    _M_omero.model._t_VesselContent = IcePy.declareClass('::omero::model::VesselContent')
    _M_omero.model._t_VesselContentPrx = IcePy.declareProxy('::omero::model::VesselContent')

if not _M_omero.model.__dict__.has_key('Action'):
    _M_omero.model._t_Action = IcePy.declareClass('::omero::model::Action')
    _M_omero.model._t_ActionPrx = IcePy.declareProxy('::omero::model::Action')

if not _M_omero.model.__dict__.has_key('Details'):
    _M_omero.model._t_Details = IcePy.declareClass('::omero::model::Details')
    _M_omero.model._t_DetailsPrx = IcePy.declareProxy('::omero::model::Details')

if not _M_omero.model.__dict__.has_key('LaneSlot'):
    _M_omero.model.LaneSlot = Ice.createTempClass()
    class LaneSlot(_M_omero.model.IObject):
        def __init__(self, _id=None, _details=None, _loaded=False, _version=None, _vid=None, _lane=None, _tag=None, _content=None, _laneSlotUK=None, _action=None, _lastUpdate=None):
            if __builtin__.type(self) == _M_omero.model.LaneSlot:
                raise RuntimeError('omero.model.LaneSlot is an abstract class')
            _M_omero.model.IObject.__init__(self, _id, _details, _loaded)
            self._version = _version
            self._vid = _vid
            self._lane = _lane
            self._tag = _tag
            self._content = _content
            self._laneSlotUK = _laneSlotUK
            self._action = _action
            self._lastUpdate = _lastUpdate

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::omero::model::IObject', '::omero::model::LaneSlot')

        def ice_id(self, current=None):
            return '::omero::model::LaneSlot'

        def ice_staticId():
            return '::omero::model::LaneSlot'
        ice_staticId = staticmethod(ice_staticId)

        def getVersion(self, current=None):
            pass

        def setVersion(self, theVersion, current=None):
            pass

        def getVid(self, current=None):
            pass

        def setVid(self, theVid, current=None):
            pass

        def getLane(self, current=None):
            pass

        def setLane(self, theLane, current=None):
            pass

        def getTag(self, current=None):
            pass

        def setTag(self, theTag, current=None):
            pass

        def getContent(self, current=None):
            pass

        def setContent(self, theContent, current=None):
            pass

        def getLaneSlotUK(self, current=None):
            pass

        def setLaneSlotUK(self, theLaneSlotUK, current=None):
            pass

        def getAction(self, current=None):
            pass

        def setAction(self, theAction, current=None):
            pass

        def getLastUpdate(self, current=None):
            pass

        def setLastUpdate(self, theLastUpdate, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_omero.model._t_LaneSlot)

        __repr__ = __str__

    _M_omero.model.LaneSlotPrx = Ice.createTempClass()
    class LaneSlotPrx(_M_omero.model.IObjectPrx):

        def getVersion(self, _ctx=None):
            return _M_omero.model.LaneSlot._op_getVersion.invoke(self, ((), _ctx))

        def begin_getVersion(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.LaneSlot._op_getVersion.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getVersion(self, _r):
            return _M_omero.model.LaneSlot._op_getVersion.end(self, _r)

        def setVersion(self, theVersion, _ctx=None):
            return _M_omero.model.LaneSlot._op_setVersion.invoke(self, ((theVersion, ), _ctx))

        def begin_setVersion(self, theVersion, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.LaneSlot._op_setVersion.begin(self, ((theVersion, ), _response, _ex, _sent, _ctx))

        def end_setVersion(self, _r):
            return _M_omero.model.LaneSlot._op_setVersion.end(self, _r)

        def getVid(self, _ctx=None):
            return _M_omero.model.LaneSlot._op_getVid.invoke(self, ((), _ctx))

        def begin_getVid(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.LaneSlot._op_getVid.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getVid(self, _r):
            return _M_omero.model.LaneSlot._op_getVid.end(self, _r)

        def setVid(self, theVid, _ctx=None):
            return _M_omero.model.LaneSlot._op_setVid.invoke(self, ((theVid, ), _ctx))

        def begin_setVid(self, theVid, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.LaneSlot._op_setVid.begin(self, ((theVid, ), _response, _ex, _sent, _ctx))

        def end_setVid(self, _r):
            return _M_omero.model.LaneSlot._op_setVid.end(self, _r)

        def getLane(self, _ctx=None):
            return _M_omero.model.LaneSlot._op_getLane.invoke(self, ((), _ctx))

        def begin_getLane(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.LaneSlot._op_getLane.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getLane(self, _r):
            return _M_omero.model.LaneSlot._op_getLane.end(self, _r)

        def setLane(self, theLane, _ctx=None):
            return _M_omero.model.LaneSlot._op_setLane.invoke(self, ((theLane, ), _ctx))

        def begin_setLane(self, theLane, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.LaneSlot._op_setLane.begin(self, ((theLane, ), _response, _ex, _sent, _ctx))

        def end_setLane(self, _r):
            return _M_omero.model.LaneSlot._op_setLane.end(self, _r)

        def getTag(self, _ctx=None):
            return _M_omero.model.LaneSlot._op_getTag.invoke(self, ((), _ctx))

        def begin_getTag(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.LaneSlot._op_getTag.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getTag(self, _r):
            return _M_omero.model.LaneSlot._op_getTag.end(self, _r)

        def setTag(self, theTag, _ctx=None):
            return _M_omero.model.LaneSlot._op_setTag.invoke(self, ((theTag, ), _ctx))

        def begin_setTag(self, theTag, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.LaneSlot._op_setTag.begin(self, ((theTag, ), _response, _ex, _sent, _ctx))

        def end_setTag(self, _r):
            return _M_omero.model.LaneSlot._op_setTag.end(self, _r)

        def getContent(self, _ctx=None):
            return _M_omero.model.LaneSlot._op_getContent.invoke(self, ((), _ctx))

        def begin_getContent(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.LaneSlot._op_getContent.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getContent(self, _r):
            return _M_omero.model.LaneSlot._op_getContent.end(self, _r)

        def setContent(self, theContent, _ctx=None):
            return _M_omero.model.LaneSlot._op_setContent.invoke(self, ((theContent, ), _ctx))

        def begin_setContent(self, theContent, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.LaneSlot._op_setContent.begin(self, ((theContent, ), _response, _ex, _sent, _ctx))

        def end_setContent(self, _r):
            return _M_omero.model.LaneSlot._op_setContent.end(self, _r)

        def getLaneSlotUK(self, _ctx=None):
            return _M_omero.model.LaneSlot._op_getLaneSlotUK.invoke(self, ((), _ctx))

        def begin_getLaneSlotUK(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.LaneSlot._op_getLaneSlotUK.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getLaneSlotUK(self, _r):
            return _M_omero.model.LaneSlot._op_getLaneSlotUK.end(self, _r)

        def setLaneSlotUK(self, theLaneSlotUK, _ctx=None):
            return _M_omero.model.LaneSlot._op_setLaneSlotUK.invoke(self, ((theLaneSlotUK, ), _ctx))

        def begin_setLaneSlotUK(self, theLaneSlotUK, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.LaneSlot._op_setLaneSlotUK.begin(self, ((theLaneSlotUK, ), _response, _ex, _sent, _ctx))

        def end_setLaneSlotUK(self, _r):
            return _M_omero.model.LaneSlot._op_setLaneSlotUK.end(self, _r)

        def getAction(self, _ctx=None):
            return _M_omero.model.LaneSlot._op_getAction.invoke(self, ((), _ctx))

        def begin_getAction(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.LaneSlot._op_getAction.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getAction(self, _r):
            return _M_omero.model.LaneSlot._op_getAction.end(self, _r)

        def setAction(self, theAction, _ctx=None):
            return _M_omero.model.LaneSlot._op_setAction.invoke(self, ((theAction, ), _ctx))

        def begin_setAction(self, theAction, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.LaneSlot._op_setAction.begin(self, ((theAction, ), _response, _ex, _sent, _ctx))

        def end_setAction(self, _r):
            return _M_omero.model.LaneSlot._op_setAction.end(self, _r)

        def getLastUpdate(self, _ctx=None):
            return _M_omero.model.LaneSlot._op_getLastUpdate.invoke(self, ((), _ctx))

        def begin_getLastUpdate(self, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.LaneSlot._op_getLastUpdate.begin(self, ((), _response, _ex, _sent, _ctx))

        def end_getLastUpdate(self, _r):
            return _M_omero.model.LaneSlot._op_getLastUpdate.end(self, _r)

        def setLastUpdate(self, theLastUpdate, _ctx=None):
            return _M_omero.model.LaneSlot._op_setLastUpdate.invoke(self, ((theLastUpdate, ), _ctx))

        def begin_setLastUpdate(self, theLastUpdate, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_omero.model.LaneSlot._op_setLastUpdate.begin(self, ((theLastUpdate, ), _response, _ex, _sent, _ctx))

        def end_setLastUpdate(self, _r):
            return _M_omero.model.LaneSlot._op_setLastUpdate.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_omero.model.LaneSlotPrx.ice_checkedCast(proxy, '::omero::model::LaneSlot', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_omero.model.LaneSlotPrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

    _M_omero.model._t_LaneSlotPrx = IcePy.defineProxy('::omero::model::LaneSlot', LaneSlotPrx)

    _M_omero.model._t_LaneSlot = IcePy.declareClass('::omero::model::LaneSlot')

    _M_omero.model._t_LaneSlot = IcePy.defineClass('::omero::model::LaneSlot', LaneSlot, (), True, _M_omero.model._t_IObject, (), (
        ('_version', (), _M_omero._t_RInt),
        ('_vid', (), _M_omero._t_RString),
        ('_lane', (), _M_omero.model._t_Lane),
        ('_tag', (), _M_omero._t_RString),
        ('_content', (), _M_omero.model._t_VesselContent),
        ('_laneSlotUK', (), _M_omero._t_RString),
        ('_action', (), _M_omero.model._t_Action),
        ('_lastUpdate', (), _M_omero.model._t_Action)
    ))
    LaneSlot._ice_type = _M_omero.model._t_LaneSlot

    LaneSlot._op_getVersion = IcePy.Operation('getVersion', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RInt, ())
    LaneSlot._op_setVersion = IcePy.Operation('setVersion', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RInt),), (), None, ())
    LaneSlot._op_getVid = IcePy.Operation('getVid', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RString, ())
    LaneSlot._op_setVid = IcePy.Operation('setVid', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RString),), (), None, ())
    LaneSlot._op_getLane = IcePy.Operation('getLane', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero.model._t_Lane, ())
    LaneSlot._op_setLane = IcePy.Operation('setLane', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_Lane),), (), None, ())
    LaneSlot._op_getTag = IcePy.Operation('getTag', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RString, ())
    LaneSlot._op_setTag = IcePy.Operation('setTag', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RString),), (), None, ())
    LaneSlot._op_getContent = IcePy.Operation('getContent', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero.model._t_VesselContent, ())
    LaneSlot._op_setContent = IcePy.Operation('setContent', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_VesselContent),), (), None, ())
    LaneSlot._op_getLaneSlotUK = IcePy.Operation('getLaneSlotUK', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero._t_RString, ())
    LaneSlot._op_setLaneSlotUK = IcePy.Operation('setLaneSlotUK', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero._t_RString),), (), None, ())
    LaneSlot._op_getAction = IcePy.Operation('getAction', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero.model._t_Action, ())
    LaneSlot._op_setAction = IcePy.Operation('setAction', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_Action),), (), None, ())
    LaneSlot._op_getLastUpdate = IcePy.Operation('getLastUpdate', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (), (), _M_omero.model._t_Action, ())
    LaneSlot._op_setLastUpdate = IcePy.Operation('setLastUpdate', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, (), (((), _M_omero.model._t_Action),), (), None, ())

    _M_omero.model.LaneSlot = LaneSlot
    del LaneSlot

    _M_omero.model.LaneSlotPrx = LaneSlotPrx
    del LaneSlotPrx

# End of module omero.model

__name__ = 'omero'

# End of module omero
